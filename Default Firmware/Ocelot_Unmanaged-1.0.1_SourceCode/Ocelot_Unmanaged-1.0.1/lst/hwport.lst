C51 COMPILER V9.60.0.0   HWPORT                                                            11/30/2021 16:22:25 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE HWPORT
OBJECT MODULE PLACED IN ..\obj\hwport.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\src\config\hwport.c LARGE OPTIMIZE(9,SIZE) INCDIR(c:\keil\c51\inc\win
                    -bond;..\src\config;..\src\config\proj_opt;..\src\cli;..\src\main;..\src\switch;..\src\phy;..\src\util;..\src\switch\vtss
                    -_api\base;..\src\switch\vtss_api\base\ocelot;..\src\switch\include;..\src\lldp;..\src\snmp;..\src\sw_lacp;..\src\eee;..\
                    -src\eee\base\include;..\src\fan;..\src\led;..\src\loop) DEFINE(VTSS_ARCH_OCELOT,FERRET_F5,PROJ_OPT=0) DEBUG OBJECTEXTEND
                    - PRINT(..\lst\hwport.lst) TABS(2) OBJECT(..\obj\hwport.obj)

line level    source

   1          /*
   2          
   3           Copyright (c) 2017 Microsemi Corporation "Microsemi".
   4          
   5           Permission is hereby granted, free of charge, to any person obtaining a copy
   6           of this software and associated documentation files (the "Software"), to deal
   7           in the Software without restriction, including without limitation the rights
   8           to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9           copies of the Software, and to permit persons to whom the Software is
  10           furnished to do so, subject to the following conditions:
  11          
  12           The above copyright notice and this permission notice shall be included in all
  13           copies or substantial portions of the Software.
  14          
  15           THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16           IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17           FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18           AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19           LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20           OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  21           SOFTWARE.
  22          
  23          */
  24          
  25          #include "common.h"     /* Always include common.h at the first place of user-defined herder files */
  26          
  27          #include "hwport.h"
  28          #include "phydrv.h"
  29          #include "main.h"
  30          #include "vtss_api_base_regs.h"
  31          #include "spiflash.h"
  32          #include "h2gpios.h"
  33          #include "h2io.h"
  34          #include "timer.h"
  35          #include "version.h"
  36          
  37          #if defined(HWPORT_DEBUG_ENABLE)
              #include "print.h"
              #endif /* HWPORT_DEBUG_ENABLE */
  40          
  41          /*****************************************************************************
  42           *
  43           *
  44           * Defines
  45           *
  46           *
  47           *
  48           ****************************************************************************/
  49          
  50          /*****************************************************************************
  51           *
C51 COMPILER V9.60.0.0   HWPORT                                                            11/30/2021 16:22:25 PAGE 2   

  52           *
  53           * Typedefs and enums
  54           *
  55           *
  56           *
  57           ****************************************************************************/
  58          
  59          /*****************************************************************************
  60           *
  61           *
  62           * Prototypes for local functions
  63           *
  64           *
  65           *
  66           ****************************************************************************/
  67          
  68          /*****************************************************************************
  69           *
  70           *
  71           * Public data
  72           *
  73           *
  74           *
  75           ****************************************************************************/
  76          
  77          /*****************************************************************************
  78           *
  79           *
  80           * Local data
  81           *
  82           *
  83           ****************************************************************************/
  84          static code uchar port2ext_tab [NO_OF_CHIP_PORTS] = CPORT_MAPTO_UPORT;
  85          static code uchar port2int_tab [NO_OF_BOARD_PORTS] = UPORT_MAPTO_CPORT;
  86          
  87          /*****************************************************************************
  88           *
  89           *
  90           * Public Functions
  91           *
  92           *
  93           ****************************************************************************/
  94          
  95          // Chip/Switch port (zero-based) --> User/Front port (one-based)
  96          vtss_uport_no_t cport2uport(vtss_cport_no_t chip_port)
  97          {
  98   1          if (chip_port < NO_OF_CHIP_PORTS) { // Avoid memory leak issue
  99   2              return port2ext_tab[chip_port];
 100   2          }
 101   1      
 102   1      #if defined(HWPORT_DEBUG_ENABLE)
                  print_str("%% Error: Wrong parameter when calling cport2uport(), chip_port=0x");
                  print_hex_b(chip_port);
                  print_cr_lf();
              #endif /* HWPORT_DEBUG_ENABLE */
 107   1          return 0xFF; // Failed case
 108   1      }
 109          
 110          // User/Front port (one-based) --> Chip/Switch port (zero-based)
 111          vtss_cport_no_t uport2cport(vtss_uport_no_t uport)
 112          {
 113   1          if (uport > 0 && uport <= NO_OF_BOARD_PORTS) { // Avoid memory leak issue
C51 COMPILER V9.60.0.0   HWPORT                                                            11/30/2021 16:22:25 PAGE 3   

 114   2              return port2int_tab[uport - 1];
 115   2          }
 116   1      
 117   1      #if defined(HWPORT_DEBUG_ENABLE)
                  print_str("%% Error: Wrong parameter when calling uport2cport(), uport=0x");
                  print_hex_b(uport);
                  print_cr_lf();
              #endif /* HWPORT_DEBUG_ENABLE */
 122   1          return 0xFF; // Failed case
 123   1      }
 124          
 125          
 126          char get_hw_version(void)
 127          {
 128   1          static char hw_ver = '\0'; // Initial value
 129   1          /*
 130   1           * Important !!!
 131   1           *
 132   1           * Don't access the switch register via APIs H2_READ()/H2_WRITE()/H2_WRITE_MASKED()
 133   1           * before the interrupt mechanism is ready
 134   1           */
 135   1      
 136   1          /* Read GPIO_14 value to decide the HW Revision
 137   1           *  On current (rev.1) boards there is no external pull on Ferret's MII_MDC output
 138   1           * (GPIO_14), hence when used as a GPIO (e.g. before using it as MII_MDC / alternate mode 01)
 139   1           * it will read as high due to the internal pullup resistor on the pin.
 140   1           *
 141   1           * On future (e.g. rev.2) boards I will add a 1K pulldown (R92 in the attached schematics)
 142   1           * to GPIO_14, so that it will read as low (until the pin is configured as MII_MDC output,
 143   1           * of course).
 144   1           */
 145   1          if (hw_ver == '\0') { // Only detect in the initial stage
 146   2              ulong mask = VTSS_BIT(14);
 147   2              ulong orig_reg_val, reg_val;
 148   2              ulong busy_loop = 10000; // Use busy loop to avoid timer not ready yet
 149   2              orig_reg_val = h2_read(VTSS_DEVCPU_GCB_GPIO_GPIO_ALT(0));
 150   2              h2_write(VTSS_DEVCPU_GCB_GPIO_GPIO_ALT(0), 0x0);
 151   2              while(busy_loop--);
 152   2              reg_val = h2_read(VTSS_DEVCPU_GCB_GPIO_GPIO_IN);
 153   2              h2_write(VTSS_DEVCPU_GCB_GPIO_GPIO_ALT(0), orig_reg_val);
 154   2              hw_ver = VTSS_BOOL(reg_val & mask) ? '1' : '2';
 155   2          }
 156   1          return hw_ver;
 157   1      }
 158          
 159          
 160          void get_mac_addr (uchar port_no, uchar *mac_addr)
 161          {
 162   1          /*
 163   1          ** Only one MAC address will be supported in Luton26 so
 164   1          ** return this MAC address anyway
 165   1          */
 166   1          flash_read_mac_addr(mac_addr);
 167   1      
 168   1          if (port_no == SYSTEM_MAC_ADDR) {
 169   2              return;
 170   2          }
 171   1      
 172   1          port_no = port_no + 1 - MIN_PORT;
 173   1      
 174   1          if ((mac_addr[5] += port_no) < port_no) {
 175   2              if (++mac_addr[4] == 0) {
C51 COMPILER V9.60.0.0   HWPORT                                                            11/30/2021 16:22:25 PAGE 4   

 176   3                  mac_addr[3]++;
 177   3              }
 178   2          }
 179   1      }
 180          
 181          
 182          void phy_hw_init (void)
 183          {
 184   1          ulong cmd;
 185   1      
 186   1      #if defined(VTSS_ARCH_OCELOT)
 187   1          u8 phy_mask = 0xF;
 188   1      
 189   1      #if defined(FERRET_F11) || defined(FERRET_F10P)
                  /* Enable QSGMII mode for devices DEV1G_4, DEV1G_5, DEV1G_6, and DEV1G_7 via SerDes6G_0.
                   * (needs to refer to hardware schematic)
                   * On FERRET_F11 and FERRET_F10P reference boards, we need to configure QSGMII mode on
                   * DEV1G_4, DEV1G_5, DEV1G_6, and DEV1G_7 via SerDes6G_0.
                   *
                   * Notice that we do the following setup.
                   * 1. Setup SerDes6G IB-Calibration in h2_serdes_macro_phase_loop_locked()
                   * 2. Setup serdes mode in h2_serdes_macro_config()
                   * 3. Enable QSGMII mode on SerDes6G_0 via setting Port Muxing mode
                   */
                  H2_WRITE_MASKED(VTSS_HSIO_HW_CFGSTAT_HW_CFG,
                                  VTSS_F_HSIO_HW_CFGSTAT_HW_CFG_QSGMII_ENA(1),
                                  VTSS_M_HSIO_HW_CFGSTAT_HW_CFG_QSGMII_ENA);
              
                  // For FERRET_F11, DEV[9] mapping to SERDES1G_4 (NPI)
                  // For FERRET_F10, DEV[9] mapping to SERDES1G_4 (SFP2)
                  H2_WRITE_MASKED(VTSS_HSIO_HW_CFGSTAT_HW_CFG,
                                  VTSS_F_HSIO_HW_CFGSTAT_HW_CFG_DEV1G_9_MODE(1),
                                  VTSS_M_HSIO_HW_CFGSTAT_HW_CFG_DEV1G_9_MODE);
              #endif // FERRET_F11 && FERRET_F10P
 210   1      
 211   1      #if defined(PCIE_CHIP_PORT)
                  H2_WRITE_MASKED(VTSS_HSIO_HW_CFGSTAT_HW_CFG,
                                  VTSS_F_HSIO_HW_CFGSTAT_HW_CFG_PCIE_ENA(1),
                                  VTSS_M_HSIO_HW_CFGSTAT_HW_CFG_PCIE_ENA);
              #endif // PCIE_CHIP_PORT
 216   1      
 217   1          /* Release common reset */
 218   1          H2_WRITE_MASKED(VTSS_DEVCPU_GCB_PHY_PHY_CFG,
 220   1                          VTSS_F_DEVCPU_GCB_PHY_PHY_CFG_PHY_COMMON_RESET(1),
 220   1                          VTSS_M_DEVCPU_GCB_PHY_PHY_CFG_PHY_COMMON_RESET);
 221   1      
 222   1        /* Wait until SUPERVISOR_COMPLETE */
 223   1          start_timer(MSEC_2000);
 224   1          do {
 225   2              H2_READ(VTSS_DEVCPU_GCB_PHY_PHY_STAT, cmd);
 226   2          }while (!VTSS_X_DEVCPU_GCB_PHY_PHY_STAT_SUPERVISOR_COMPLETE(cmd) && !timeout());
 227   1      
 228   1          if (timeout()) {
 229   2      #if defined(HWPORT_DEBUG_ENABLE)
                      println_str("%% Timeout when calling phy_hw_init()");
              #endif // HWPORT_DEBUG_ENABLE
 232   2              return;
 233   2          }
 234   1          
 235   1          delay_1(20);
 236   1          /* Release individual phy resets and enable phy interfaces */
 237   1          H2_WRITE_MASKED(VTSS_DEVCPU_GCB_PHY_PHY_CFG,
C51 COMPILER V9.60.0.0   HWPORT                                                            11/30/2021 16:22:25 PAGE 5   

 241   1                          VTSS_F_DEVCPU_GCB_PHY_PHY_CFG_PHY_RESET(phy_mask) |
 241   1                          VTSS_F_DEVCPU_GCB_PHY_PHY_CFG_PHY_ENA(phy_mask),
 241   1                          VTSS_M_DEVCPU_GCB_PHY_PHY_CFG_PHY_RESET |
 241   1                          VTSS_M_DEVCPU_GCB_PHY_PHY_CFG_PHY_ENA);
 242   1          
 243   1          H2_READ(VTSS_DEVCPU_GCB_PHY_PHY_CFG, cmd);
 244   1          if (cmd != (VTSS_M_DEVCPU_GCB_PHY_PHY_CFG_PHY_RESET |
 245   1                      VTSS_M_DEVCPU_GCB_PHY_PHY_CFG_PHY_ENA |
 246   1                      VTSS_M_DEVCPU_GCB_PHY_PHY_CFG_PHY_COMMON_RESET)) {
 247   2      #if defined(MAIN_DEBUG_ENABLE)
                      print_str("Internal PHYs reset failure"); print_hex_dw(cmd); print_cr_lf();
              #endif /* MAIN_DEBUG_ENABLE */
 250   2          }
 251   1      
 252   1      #elif defined(VTSS_ARCH_LUTON26)
                  /* Release reset of built-in PHYs */
                  H2_WRITE_MASKED(VTSS_DEVCPU_GCB_DEVCPU_RST_REGS_SOFT_CHIP_RST, 0x00, \
                                  VTSS_F_DEVCPU_GCB_DEVCPU_RST_REGS_SOFT_CHIP_RST_SOFT_PHY_RST);
                  do {
                      H2_READ(VTSS_DEVCPU_GCB_MISC_MISC_STAT, cmd);
                  } while ((cmd & VTSS_F_DEVCPU_GCB_MISC_MISC_STAT_PHY_READY) == 0);
              
              #ifdef LUTON26_L16
              #ifdef LUTON26_L16_QSGMII_EXT_PHY
                  h2_gpio_mode_set(15, VTSS_GPIO_OUT);
                  h2_gpio_write(15, 0);
                  delay_1(120); // Datasheet says 120 ms
              
                  h2_gpio_write(15, 1);
                  delay_1(120); // Datasheet says 120 ms
              #endif // LUTON26_L16_QSGMII_EXT_PHY
              #endif // LUTON26_L16
              #endif
 271   1      }
 272          
 273          /* GPIO/SGPIO initialization */
 274          void gpio_init(void)
 275          {
 276   1          h2_sgpio_enable();
 277   1      }
 278          
 279          /*****************************************************************************
 280           *                                                                           *
 281           *  End of file.                                                             *
 282           *                                                                           *
 283           *****************************************************************************/
 284          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    458    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =      1      25
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
