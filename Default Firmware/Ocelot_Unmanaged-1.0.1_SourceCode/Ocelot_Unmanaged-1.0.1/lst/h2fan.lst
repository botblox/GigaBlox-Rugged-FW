C51 COMPILER V9.60.0.0   H2FAN                                                             11/30/2021 16:22:20 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE H2FAN
OBJECT MODULE PLACED IN ..\obj\h2fan.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\src\switch\h2fan.c LARGE OPTIMIZE(9,SIZE) INCDIR(c:\keil\c51\inc\winb
                    -ond;..\src\config;..\src\config\proj_opt;..\src\cli;..\src\main;..\src\switch;..\src\phy;..\src\util;..\src\switch\vtss_
                    -api\base;..\src\switch\vtss_api\base\ocelot;..\src\switch\include;..\src\lldp;..\src\snmp;..\src\sw_lacp;..\src\eee;..\s
                    -rc\eee\base\include;..\src\fan;..\src\led;..\src\loop) DEFINE(VTSS_ARCH_OCELOT,FERRET_F5,PROJ_OPT=0) DEBUG OBJECTEXTEND 
                    -PRINT(..\lst\h2fan.lst) TABS(2) OBJECT(..\obj\h2fan.obj)

line level    source

   1          /*
   2          
   3           Copyright (c) 2017 Microsemi Corporation "Microsemi".
   4          
   5           Permission is hereby granted, free of charge, to any person obtaining a copy
   6           of this software and associated documentation files (the "Software"), to deal
   7           in the Software without restriction, including without limitation the rights
   8           to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9           copies of the Software, and to permit persons to whom the Software is
  10           furnished to do so, subject to the following conditions:
  11          
  12           The above copyright notice and this permission notice shall be included in all
  13           copies or substantial portions of the Software.
  14          
  15           THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16           IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17           FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18           AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19           LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20           OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  21           SOFTWARE.
  22          
  23          */
  24          
  25          #include "common.h"     /* Always include common.h at the first place of user-defined herder files */
  26          #include "timer.h"
  27          #include "misc2.h"
  28          #include "h2io.h"
  29          #include "vtss_api_base_regs.h"
  30          #include "h2fan.h"
  31          #include "phytsk.h"
  32          
  33          /*****************************************************************************
  34           *
  35           *
  36           * Defines
  37           *
  38           *
  39           *
  40           ****************************************************************************/
  41          
  42          /*****************************************************************************
  43           *
  44           *
  45           * Typedefs and enums
  46           *
  47           *
  48           *
  49           ****************************************************************************/
  50          
  51          /*****************************************************************************
C51 COMPILER V9.60.0.0   H2FAN                                                             11/30/2021 16:22:20 PAGE 2   

  52           *
  53           *
  54           * Public data
  55           *
  56           *
  57           *
  58           ****************************************************************************/
  59          
  60          /*****************************************************************************
  61           *
  62           *
  63           * Prototypes for local functions
  64           *
  65           *
  66           *
  67           ****************************************************************************/
  68          
  69          /*****************************************************************************
  70           *
  71           *
  72           * Local data
  73           *
  74           *
  75           *
  76           ****************************************************************************/
  77          
  78          #if TRANSIT_FAN_CONTROL
              /* =================================================================
               * FAN speed control
              * =================================================================*/
              
              /*
               * Set FAN configuration according to the fan specifications
               *
               * In :  spec  - Fan specifications
               *
               */
              
              void h2_fan_conf_set(const vtss_fan_spec_t * const spec) {
              
                  // Set GPIO alternate functions. PWM is bit 29 and TACHO is bit 4.
                  // Must be set to overlaid function 1 = 0x01
                  const ulong PWM_BIT_MASK = 0x20000010;
              
                  H2_WRITE_MASKED(VTSS_DEVCPU_GCB_GPIO_GPIO_ALT(1),          0x0, PWM_BIT_MASK);
                  H2_WRITE_MASKED(VTSS_DEVCPU_GCB_GPIO_GPIO_ALT(0), PWM_BIT_MASK, PWM_BIT_MASK);
              
                  // Set PWM frequency
                  H2_WRITE_MASKED(VTSS_DEVCPU_GCB_FAN_CTRL_FAN_CFG,
                         VTSS_F_DEVCPU_GCB_FAN_CTRL_PWM_FREQ_PWM_FREQ(spec->fan_pwm_freq),
                         VTSS_M_DEVCPU_GCB_FAN_CTRL_PWM_FREQ_PWM_FREQ);
              
                  // Set PWM polarity
                  H2_WRITE_MASKED(VTSS_DEVCPU_GCB_FAN_CTRL_FAN_CFG,
                         spec->fan_low_pol ? VTSS_M_DEVCPU_GCB_FAN_CTRL_FAN_CFG_INV_POL : 0,
                         VTSS_M_DEVCPU_GCB_FAN_CTRL_FAN_CFG_INV_POL);
              
                  // Set PWM open collector
                  H2_WRITE_MASKED(VTSS_DEVCPU_GCB_FAN_CTRL_FAN_CFG,
                         spec->fan_open_col ? VTSS_M_DEVCPU_GCB_FAN_CTRL_FAN_CFG_PWM_OPEN_COL_ENA : 0,
                         VTSS_M_DEVCPU_GCB_FAN_CTRL_FAN_CFG_PWM_OPEN_COL_ENA);
              
C51 COMPILER V9.60.0.0   H2FAN                                                             11/30/2021 16:22:20 PAGE 3   

                  // Set fan speed measurement
                  if (spec->type == VTSS_FAN_3_WIRE_TYPE) {
                      // Enable gating for 3-wire fan types.
                      H2_WRITE_MASKED(VTSS_DEVCPU_GCB_FAN_CTRL_FAN_CFG,
                             VTSS_F_DEVCPU_GCB_FAN_CTRL_FAN_CFG_GATE_ENA(1),
                             VTSS_M_DEVCPU_GCB_FAN_CTRL_FAN_CFG_GATE_ENA);
                  } else {
                      //  For 4-wire fan types we need to disable gating (2-wire types doesn't matter)
                      H2_WRITE_MASKED(VTSS_DEVCPU_GCB_FAN_CTRL_FAN_CFG,
                              VTSS_F_DEVCPU_GCB_FAN_CTRL_FAN_CFG_GATE_ENA(0),
                              VTSS_M_DEVCPU_GCB_FAN_CTRL_FAN_CFG_GATE_ENA);
                  }
              }
              
              /*
               * Set FAN cooling level
               *
               * In :  lvl - New fan cooling level, 0 = Fan is OFF, 0xFF = Fan constant ON.
               *
               */
              
              void h2_fan_cool_lvl_set(uchar lvl) {
              
                  // Set PWM duty cycle (fan speed)
                  H2_WRITE_MASKED(VTSS_DEVCPU_GCB_FAN_CTRL_FAN_CFG,
                         VTSS_F_DEVCPU_GCB_FAN_CTRL_FAN_CFG_DUTY_CYCLE(lvl),
                         VTSS_M_DEVCPU_GCB_FAN_CTRL_FAN_CFG_DUTY_CYCLE);
              
              }
              
              #if 0
              /*
               * Get FAN cooling level
               *
               * Return : Fan cooling level, 0 = Fan is OFF, 0xFF = Fan constant ON.
               *
               */
              
              uchar h2_fan_cool_lvl_get(void) {
              
                  ulong fan_cfg_reg;
              
                  // Read the register
                  H2_READ(VTSS_DEVCPU_GCB_FAN_CTRL_FAN_CFG, fan_cfg_reg);
              
                  // Get PWM duty cycle
                  return VTSS_X_DEVCPU_GCB_FAN_CFG_FAN_CFG_DUTY_CYCLE(fan_cfg_reg);
              }
              #endif
              
              /*
               * Get FAN rotation count.
               *
               * In : fan_spec - Pointer to fan specification, e.g. type of fan.
               *
               * In/Out - rotation_count - Pointer to where to put the rotation count.
               *
               */
              ulong h2_fan_rotation_get() {
              
                  ulong fan_cnt_reg;
                  // Read the register
C51 COMPILER V9.60.0.0   H2FAN                                                             11/30/2021 16:22:20 PAGE 4   

                  H2_READ(VTSS_DEVCPU_GCB_FAN_CTRL_FAN_CNT, fan_cnt_reg);
              
                  return fan_cnt_reg;
              }
              
              /*
               * Get chip temperature.
               *
               * In/Out - chip_temp - Pointer to where to put the chip temperature.
               *
               */
              void h2_fan_chip_temp_get(ushort * chip_temp) {
                  *chip_temp = phy_get_sys_temp();
              
              }
              #endif
 192          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
