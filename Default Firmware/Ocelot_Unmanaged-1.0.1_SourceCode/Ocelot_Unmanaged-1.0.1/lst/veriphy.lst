C51 COMPILER V9.60.0.0   VERIPHY                                                           11/30/2021 16:22:24 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE VERIPHY
OBJECT MODULE PLACED IN ..\obj\veriphy.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\src\phy\veriphy.c LARGE OPTIMIZE(9,SIZE) INCDIR(c:\keil\c51\inc\winbo
                    -nd;..\src\config;..\src\config\proj_opt;..\src\cli;..\src\main;..\src\switch;..\src\phy;..\src\util;..\src\switch\vtss_a
                    -pi\base;..\src\switch\vtss_api\base\ocelot;..\src\switch\include;..\src\lldp;..\src\snmp;..\src\sw_lacp;..\src\eee;..\sr
                    -c\eee\base\include;..\src\fan;..\src\led;..\src\loop) DEFINE(VTSS_ARCH_OCELOT,FERRET_F5,PROJ_OPT=0) DEBUG OBJECTEXTEND P
                    -RINT(..\lst\veriphy.lst) TABS(2) OBJECT(..\obj\veriphy.obj)

line level    source

   1          /*
   2          
   3           Copyright (c) 2017 Microsemi Corporation "Microsemi".
   4          
   5           Permission is hereby granted, free of charge, to any person obtaining a copy
   6           of this software and associated documentation files (the "Software"), to deal
   7           in the Software without restriction, including without limitation the rights
   8           to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9           copies of the Software, and to permit persons to whom the Software is
  10           furnished to do so, subject to the following conditions:
  11          
  12           The above copyright notice and this permission notice shall be included in all
  13           copies or substantial portions of the Software.
  14          
  15           THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16           IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17           FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18           AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19           LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20           OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  21           SOFTWARE.
  22          
  23          */
  24          
  25          #include <string.h>
  26          
  27          #include "common.h"     /* Always include common.h at the first place of user-defined herder files */
  28          
  29          #include "print.h"
  30          #include "timer.h"
  31          
  32          #include "phy_base.h"
  33          #include "misc2.h"
  34          #include "hwport.h"
  35          #include "h2reg.h"
  36          #include "h2io.h"
  37          
  38          #include "veriphy.h"
  39          #include "phymap.h"
  40          
  41          #if TRANSIT_VERIPHY
              
              /*****************************************************************************
               *
               *
               * Defines
               *
               *
               *
               ****************************************************************************/
              
C51 COMPILER V9.60.0.0   VERIPHY                                                           11/30/2021 16:22:24 PAGE 2   

              
              /*****************************************************************************
               *
               *
               * Typedefs and enums
               *
               *
               *
               ****************************************************************************/
              
              
              /*****************************************************************************
               *
               *
               * Prototypes for local functions
               *
               *
               *
               ****************************************************************************/
              
              
              /*****************************************************************************
               *
               *
               * Local data
               *
               *
               *
               ****************************************************************************/
              
              
              
              
              
              
              /* ************************************************************************ */
              void veriphy_start (vtss_port_no_t port_no)
              /* ------------------------------------------------------------------------ --
               * Purpose     :
               * Remarks     :
               * Restrictions:
               * See also    :
               * Example     :
               ****************************************************************************/
              {
                  phy_id_t phy_id;
                /* Read PHY id to determine action */
                phy_read_id(port_no, &phy_id);
                
                switch (phy_id.family) {
              #if VTSS_COBRA
                case VTSS_PHY_FAMILY_COBRA:
                  break;
              #endif
              
                  default:
              #if !defined(VTSS_ARCH_OCELOT)
                      //signal to API the veriphy is running for this port
                      vtss_phy_veriphy_running(port_no, TRUE, TRUE);
              
                      // Micro patch must be suspended while veriphy is running.
                      atom_patch_suspend(port_no, TRUE);
C51 COMPILER V9.60.0.0   VERIPHY                                                           11/30/2021 16:22:24 PAGE 3   

              
                      // Starting Veriphy
                      phy_page_ext(port_no);
                      phy_write_masked(port_no, VTSS_PHY_VERIPHY_CTRL_REG1, 0x8000, 0x8000);
                      phy_page_std(port_no);
              #endif        
                      break;
                }
              
              }
              
              /* ************************************************************************ */
              static void veriphy_done (vtss_port_no_t port_no)
              /* ------------------------------------------------------------------------ --
               * Purpose     :
               * Remarks     :
               * Restrictions:
               * See also    :
               * Example     :
               ****************************************************************************/
              {
              
                  // Ok veriphy done we can resume the micro patchning.
                  atom_patch_suspend(port_no, FALSE);
              }
              
              
              ulong vtss_phy_veriphy_running(vtss_port_no_t port_no, BOOL set, uchar running) {
                  static ulong veriphy_running_bit_vector = 0; // Bit vector that indicates if veriphy is running for a 
             -port. The bit in the vector correspond to the port number
              
                  if (set) {
                      if (running) {
                          veriphy_running_bit_vector |= 1 << port_no; // Set the running bit in the vector
                      } else {
                          veriphy_running_bit_vector &= ~(1 << port_no); // Clear the running bit in the vector
                      }
                  }
                  return veriphy_running_bit_vector;
              }
              
              
              /* ************************************************************************ */
              uchar veriphy_run (vtss_port_no_t port_no, veriphy_parms_t *veriphy_parms_ptr, BOOL *done)
              /* ------------------------------------------------------------------------ --
               * Purpose     :
               * Remarks     :
               * Restrictions:
               * See also    :
               * Example     :
               ****************************************************************************/
              {
                  ushort reg_val;
                  uchar  result = 1;
                  uchar  cnt = 0;
              
              
                  // Check if veriphy is done
                  phy_page_ext(port_no);
                  reg_val = phy_read(port_no, VTSS_PHY_VERIPHY_CTRL_REG1);
                  if ((reg_val & 0x8000) != 0) {
                      *done = FALSE;
C51 COMPILER V9.60.0.0   VERIPHY                                                           11/30/2021 16:22:24 PAGE 4   

                      goto done;
                  } else {
                      *done = TRUE;
                  }
              
                  reg_val = phy_read(port_no, VTSS_PHY_VERIPHY_CTRL_REG1);
              
                  // Multiply by 3 because resolution is 3 meters // See datasheet
                  veriphy_parms_ptr->loc[0] = ((reg_val & VTSS_PHY_VERIPHY_CTRL_REG1_M_PAIR_A_DISTANCE) >> 8) * 3;
                  veriphy_parms_ptr->loc[1] = (reg_val & VTSS_PHY_VERIPHY_CTRL_REG1_M_PAIR_B_DISTANCE) * 3;
              
                  reg_val= phy_read(port_no, VTSS_PHY_VERIPHY_CTRL_REG2);
                  veriphy_parms_ptr->loc[2] = ((reg_val & VTSS_PHY_VERIPHY_CTRL_REG2_M_PAIR_C_DISTANCE) >> 8) * 3;
                  veriphy_parms_ptr->loc[3] = (reg_val & VTSS_PHY_VERIPHY_CTRL_REG2_M_PAIR_D_DISTANCE) * 3;
              
                  reg_val = phy_read(port_no, VTSS_PHY_VERIPHY_CTRL_REG3);
                  veriphy_parms_ptr->stat[3] =  reg_val & VTSS_PHY_VERIPHY_CTRL_REG3_M_PAIR_D_TERMINATION_STATUS;
                  veriphy_parms_ptr->stat[2] = (reg_val & VTSS_PHY_VERIPHY_CTRL_REG3_M_PAIR_C_TERMINATION_STATUS) >> 4;
                  veriphy_parms_ptr->stat[1] = (reg_val & VTSS_PHY_VERIPHY_CTRL_REG3_M_PAIR_B_TERMINATION_STATUS) >> 8;
                  veriphy_parms_ptr->stat[0] = (reg_val & VTSS_PHY_VERIPHY_CTRL_REG3_M_PAIR_A_TERMINATION_STATUS) >> 12;
              
                  veriphy_parms_ptr->flags = 1 << 1; // Signal Veriphy result valid
              
                  for (cnt=0; cnt<4; cnt++)
                  {
                      if (veriphy_parms_ptr->stat[cnt] != 0) //!=0 : meaning link status is OPEN (status_txt_tab[0]==TXT
             -_NO_VERIPHY_OK)
                      {
                          veriphy_parms_ptr->flags = 0 ; // Signal Veriphy result invalid 
                          break;
                      }
                  }
              
                  if (phy_map(port_no)==0)//Not CuPHY port (not connected to MIIM0 or MIIM1)
                  {
                      for (cnt=0; cnt<4; cnt++)
                      {
                          veriphy_parms_ptr->stat[cnt] = 1;//force link status as OPEN
                          veriphy_parms_ptr->loc[cnt]=0;//set len 0  
                      }
                  }
              
                  phy_page_std(port_no);
              
                  //signal to API the veriphy isn't running for this port
                  vtss_phy_veriphy_running(port_no, TRUE, FALSE);
              done:
              
                  veriphy_done(port_no);
              
                  return result;
              }
              
              #endif
 228          
 229          /****************************************************************************/
 230          /*                                                                          */
 231          /*  End of file.                                                            */
 232          /*                                                                          */
 233          /****************************************************************************/


C51 COMPILER V9.60.0.0   VERIPHY                                                           11/30/2021 16:22:24 PAGE 5   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
