C51 COMPILER V9.60.0.0   H2STATS                                                           11/30/2021 16:22:21 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE H2STATS
OBJECT MODULE PLACED IN ..\obj\h2stats.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\src\switch\h2stats.c LARGE OPTIMIZE(9,SIZE) INCDIR(c:\keil\c51\inc\wi
                    -nbond;..\src\config;..\src\config\proj_opt;..\src\cli;..\src\main;..\src\switch;..\src\phy;..\src\util;..\src\switch\vts
                    -s_api\base;..\src\switch\vtss_api\base\ocelot;..\src\switch\include;..\src\lldp;..\src\snmp;..\src\sw_lacp;..\src\eee;..
                    -\src\eee\base\include;..\src\fan;..\src\led;..\src\loop) DEFINE(VTSS_ARCH_OCELOT,FERRET_F5,PROJ_OPT=0) DEBUG OBJECTEXTEN
                    -D PRINT(..\lst\h2stats.lst) TABS(2) OBJECT(..\obj\h2stats.obj)

line level    source

   1          /*
   2          
   3           Copyright (c) 2017 Microsemi Corporation "Microsemi".
   4          
   5           Permission is hereby granted, free of charge, to any person obtaining a copy
   6           of this software and associated documentation files (the "Software"), to deal
   7           in the Software without restriction, including without limitation the rights
   8           to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9           copies of the Software, and to permit persons to whom the Software is
  10           furnished to do so, subject to the following conditions:
  11          
  12           The above copyright notice and this permission notice shall be included in all
  13           copies or substantial portions of the Software.
  14          
  15           THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16           IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17           FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18           AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19           LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20           OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  21           SOFTWARE.
  22          
  23          */
  24          
  25          #include "common.h"     /* Always include common.h at the first place of user-defined herder files */
  26          #include "vtss_api_base_regs.h"
  27          #include "h2io.h"
  28          #include "h2stats.h"
  29          #include "txt.h"
  30          #include "print.h"
  31          
  32          #if UNMANAGED_PORT_STATISTICS_IF
  33          
  34          /*****************************************************************************
  35           *
  36           *
  37           * Defines
  38           *
  39           *
  40           *
  41           ****************************************************************************/
  42          
  43          
  44          /*****************************************************************************
  45           *
  46           *
  47           * Typedefs and enums
  48           *
  49           *
  50           *
  51           ****************************************************************************/
C51 COMPILER V9.60.0.0   H2STATS                                                           11/30/2021 16:22:21 PAGE 2   

  52          
  53          
  54          /*****************************************************************************
  55           *
  56           *
  57           * Prototypes for local functions
  58           *
  59           *
  60           *
  61           ****************************************************************************/
  62          BOOL GPARM_break_show_statistic_flag = FALSE;
  63          
  64          /*****************************************************************************
  65           *
  66           *
  67           * Local data
  68           *
  69           *
  70           *
  71           ****************************************************************************/
  72          
  73          
  74          static const ushort tx_counters[6] = {  CNT_TX_64,
  75                                                  CNT_TX_65_TO_127,
  76                                                  CNT_TX_128_TO_255,
  77                                                  CNT_TX_256_TO_511,
  78                                                  CNT_TX_512_TO_1023,
  79                                                  CNT_TX_1024_TO_1526 };
  80          
  81          
  82          static const ushort rx_counters[6] = {  CNT_RX_64,
  83                                                  CNT_RX_65_TO_127,
  84                                                  CNT_RX_128_TO_255,
  85                                                  CNT_RX_256_TO_511,
  86                                                  CNT_RX_512_TO_1023,
  87                                                  CNT_RX_1024_TO_1526 };
  88          
  89          static ulong _h2_stats_counter_get_private(vtss_cport_no_t chip_port, port_statistics_t counter_id)
  90          {
  91   1          ulong temp = 0, tgt;
  92   1      #if defined(VTSS_ARCH_LUTON26)
                  ulong port_offset;
              #endif // VTSS_ARCH_LUTON26
  95   1      
  96   1          /* Reserved */
  97   1          if (counter_id >= 0x7000) {
  98   2              return 0;
  99   2          }
 100   1      
 101   1          // EA = 0; // Disable interrupt while reading the port statistics.
 102   1      #if defined(VTSS_ARCH_LUTON26)
                  if (counter_id >= 0xC00) {
                      port_offset = 18UL * ((ulong) chip_port);
                  } else if (counter_id >= 0x800) {
                      port_offset = 31UL * ((ulong) chip_port);
                  } else {
                      port_offset = 43UL * ((ulong) chip_port);
                  }
              
                  tgt = VTSS_SYS_STAT_CNT(counter_id + port_offset);
                  H2_READ(tgt, temp);
              
C51 COMPILER V9.60.0.0   H2STATS                                                           11/30/2021 16:22:21 PAGE 3   

              #elif defined(VTSS_ARCH_OCELOT)
 115   1          //select the port to be read.
 116   1          H2_WRITE_MASKED(VTSS_SYS_SYSTEM_STAT_CFG,
 118   1                          VTSS_F_SYS_SYSTEM_STAT_CFG_STAT_VIEW(chip_port),
 118   1                          VTSS_M_SYS_SYSTEM_STAT_CFG_STAT_VIEW);
 119   1          tgt = VTSS_SYS_STAT_CNT(counter_id);
 120   1          H2_READ(tgt, temp);
 121   1      #endif
 122   1      
 123   1          // EA = 1; // Enable interrupt
 124   1          return temp;
 125   1      }
 126          
 127          ulong h2_stats_counter_get(vtss_cport_no_t chip_port, port_statistics_t counter_id)
 128          {
 129   1          ulong cnt;
 130   1          uchar i;
 131   1          ushort*p;
 132   1      
 133   1          if (counter_id == CNT_TX_PKTS) {
 134   2              p = &tx_counters[0];
 135   2          } else {
 136   2              if (counter_id == CNT_RX_PKTS) {
 137   3                  p = &rx_counters[0];
 138   3              } else {
 139   3                  return _h2_stats_counter_get_private( chip_port, counter_id);
 140   3              }
 141   2          }
 142   1      
 143   1          /*
 144   1           * For Luton26 there is no counter that counts all frames,
 145   1           * so we have to calculate it ourselves.
 146   1           */
 147   1      
 148   1          for (i = 0, cnt = 0; i < 6; i++) {
 149   2              cnt += _h2_stats_counter_get_private(chip_port, p[i]);
 150   2          }
 151   1      
 152   1          return cnt;
 153   1      }
 154          
 155          void h2_stats_counter_clear(vtss_cport_no_t chip_port)
 156          {
 157   1      #if defined(VTSS_ARCH_OCELOT)
 158   1          H2_WRITE(VTSS_SYS_SYSTEM_STAT_CFG,
 159   1                   VTSS_F_SYS_SYSTEM_STAT_CFG_STAT_CLEAR_SHOT(0x7) | VTSS_F_SYS_SYSTEM_STAT_CFG_STAT_VIEW(chip_p
             -ort));
 160   1      #endif // VTSS_ARCH_OCELOT
 161   1      }
 162          
 163          /* ************************************************************************ */
 164          void print_port_statistics(vtss_cport_no_t chip_port)
 165          /* ------------------------------------------------------------------------ --
 166           * Purpose     :
 167           * Remarks     :
 168           * Restrictions:
 169           * See also    :
 170           * Example     :
 171           ****************************************************************************/
 172          {
 173   1      #if UNMANAGED_PORT_STATISTICS_QOS
              #define NO_OF_LINES 44
C51 COMPILER V9.60.0.0   H2STATS                                                           11/30/2021 16:22:21 PAGE 4   

              #define QOS_COUNTERS_START 21
              #else
 177   1      #define NO_OF_LINES 20
 178   1      #endif // UNMANAGED_PORT_STATISTICS_QOS
 179   1      #define SIZE_COUNTERS_START   7
 180   1      #define ERROR_COUNTERS_START 13
 181   1      
 182   1          code std_txt_t prefix_txt [2] = {TXT_NO_RX_PREFIX , TXT_NO_TX_PREFIX};
 183   1          code struct {
 184   1              std_txt_t txt_no [2];
 185   1              port_statistics_t counter_id [2];
 186   1          }  display_tab_1 [NO_OF_LINES] = {
 187   1              TXT_NO_PACKETS,         TXT_NO_PACKETS,         CNT_RX_PKTS,            CNT_TX_PKTS,
 188   1              TXT_NO_OCTETS,          TXT_NO_OCTETS,          CNT_RX_OCTETS,          CNT_TX_OCTETS,
 189   1              TXT_NO_BC_PACKETS,      TXT_NO_BC_PACKETS,      CNT_RX_BCAST_PKTS,      CNT_TX_BCAST_PKTS,
 190   1              TXT_NO_MC_PACKETS,      TXT_NO_MC_PACKETS,      CNT_RX_MCAST_PKTS,      CNT_RX_MCAST_PKTS,
 191   1              TXT_NO_PAUSE,           TXT_NO_PAUSE,           CNT_RX_PAUSE,           CNT_TX_PAUSE,
 192   1              TXT_NO_ERR_PACKETS,     TXT_NO_ERR_PACKETS,     CNT_RX_CRC_ALIGN_ERRS,  CNT_TX_DROP,
 193   1              TXT_NO_MAC_CTRL,        TXT_NO_DASH,            CNT_RX_CTRL,            COUNTER_NONE,
 194   1      
 195   1              TXT_NO_64_BYTES,        TXT_NO_64_BYTES,        CNT_RX_64,              CNT_TX_64,
 196   1              TXT_NO_65_BYTES,        TXT_NO_65_BYTES,        CNT_RX_65_TO_127,       CNT_TX_65_TO_127,
 197   1              TXT_NO_128_BYTES,       TXT_NO_128_BYTES,       CNT_RX_128_TO_255,      CNT_TX_128_TO_255,
 198   1              TXT_NO_256_BYTES,       TXT_NO_256_BYTES,       CNT_RX_256_TO_511,      CNT_TX_256_TO_511,
 199   1              TXT_NO_512_BYTES,       TXT_NO_512_BYTES,       CNT_RX_512_TO_1023,     CNT_TX_512_TO_1023,
 200   1              TXT_NO_1024_BYTES,      TXT_NO_1024_BYTES,      CNT_RX_1024_TO_1526,    CNT_TX_1024_TO_1526,
 201   1              TXT_NO_CRC_ALIGN,       TXT_NO_COLLISIONS,      CNT_RX_CRC_ALIGN_ERRS,  CNT_TX_COLLISIONS,
 202   1              TXT_NO_UNDERSIZE,       TXT_NO_DROPS,           CNT_RX_UNDERSIZE_PKTS,  CNT_TX_DROP,
 203   1              TXT_NO_OVERSIZE,        TXT_NO_OVERFLOW,        CNT_RX_OVERSIZE_PKTS,   CNT_DROP_TAIL,
 204   1              TXT_NO_FRAGMENTS,       TXT_NO_AGED,            CNT_RX_FRAGMENTS,       CNT_TX_AGED,
 205   1              TXT_NO_JABBERS,         TXT_NO_DASH,            CNT_RX_JABBERS,         COUNTER_NONE,
 206   1              TXT_NO_DROPS,           TXT_NO_DASH,            CNT_DROP_LOCAL,         COUNTER_NONE,
 207   1              TXT_NO_CAT_DROPS,       TXT_NO_DASH,            CNT_RX_CAT_DROP,        COUNTER_NONE,
 208   1      
 209   1      #if UNMANAGED_PORT_STATISTICS_QOS
                      TXT_NO_RED_PRIO_0,      TXT_NO_DASH,            CNT_RX_RED_PRIO_0,      COUNTER_NONE,
                      TXT_NO_RED_PRIO_1,      TXT_NO_DASH,            CNT_RX_RED_PRIO_1,      COUNTER_NONE,
                      TXT_NO_RED_PRIO_2,      TXT_NO_DASH,            CNT_RX_RED_PRIO_2,      COUNTER_NONE,
                      TXT_NO_RED_PRIO_3,      TXT_NO_DASH,            CNT_RX_RED_PRIO_3,      COUNTER_NONE,
                      TXT_NO_RED_PRIO_4,      TXT_NO_DASH,            CNT_RX_RED_PRIO_4,      COUNTER_NONE,
                      TXT_NO_RED_PRIO_5,      TXT_NO_DASH,            CNT_RX_RED_PRIO_5,      COUNTER_NONE,
                      TXT_NO_RED_PRIO_6,      TXT_NO_DASH,            CNT_RX_RED_PRIO_6,      COUNTER_NONE,
                      TXT_NO_RED_PRIO_7,      TXT_NO_DASH,            CNT_RX_RED_PRIO_7,      COUNTER_NONE,
              
                      TXT_NO_YELLOW_PRIO_0,   TXT_NO_YELLOW_PRIO_0,   CNT_RX_YELLOW_PRIO_0,   CNT_TX_YELLOW_PRIO_0,
                      TXT_NO_YELLOW_PRIO_1,   TXT_NO_YELLOW_PRIO_1,   CNT_RX_YELLOW_PRIO_1,   CNT_TX_YELLOW_PRIO_1,
                      TXT_NO_YELLOW_PRIO_2,   TXT_NO_YELLOW_PRIO_2,   CNT_RX_YELLOW_PRIO_2,   CNT_TX_YELLOW_PRIO_2,
                      TXT_NO_YELLOW_PRIO_3,   TXT_NO_YELLOW_PRIO_3,   CNT_RX_YELLOW_PRIO_3,   CNT_TX_YELLOW_PRIO_3,
                      TXT_NO_YELLOW_PRIO_4,   TXT_NO_YELLOW_PRIO_4,   CNT_RX_YELLOW_PRIO_4,   CNT_TX_YELLOW_PRIO_4,
                      TXT_NO_YELLOW_PRIO_5,   TXT_NO_YELLOW_PRIO_5,   CNT_RX_YELLOW_PRIO_5,   CNT_TX_YELLOW_PRIO_5,
                      TXT_NO_YELLOW_PRIO_6,   TXT_NO_YELLOW_PRIO_6,   CNT_RX_YELLOW_PRIO_6,   CNT_TX_YELLOW_PRIO_6,
                      TXT_NO_YELLOW_PRIO_7,   TXT_NO_YELLOW_PRIO_7,   CNT_RX_YELLOW_PRIO_7,   CNT_TX_YELLOW_PRIO_7,
              
                      TXT_NO_GREEN_PRIO_0,    TXT_NO_GREEN_PRIO_0,    CNT_RX_GREEN_PRIO_0,    CNT_TX_GREEN_PRIO_0,
                      TXT_NO_GREEN_PRIO_1,    TXT_NO_GREEN_PRIO_1,    CNT_RX_GREEN_PRIO_1,    CNT_TX_GREEN_PRIO_1,
                      TXT_NO_GREEN_PRIO_2,    TXT_NO_GREEN_PRIO_2,    CNT_RX_GREEN_PRIO_2,    CNT_TX_GREEN_PRIO_2,
                      TXT_NO_GREEN_PRIO_3,    TXT_NO_GREEN_PRIO_3,    CNT_RX_GREEN_PRIO_3,    CNT_TX_GREEN_PRIO_3,
                      TXT_NO_GREEN_PRIO_4,    TXT_NO_GREEN_PRIO_4,    CNT_RX_GREEN_PRIO_4,    CNT_TX_GREEN_PRIO_4,
                      TXT_NO_GREEN_PRIO_5,    TXT_NO_GREEN_PRIO_5,    CNT_RX_GREEN_PRIO_5,    CNT_TX_GREEN_PRIO_5,
                      TXT_NO_GREEN_PRIO_6,    TXT_NO_GREEN_PRIO_6,    CNT_RX_GREEN_PRIO_6,    CNT_TX_GREEN_PRIO_6,
                      TXT_NO_GREEN_PRIO_7,    TXT_NO_GREEN_PRIO_7,    CNT_RX_GREEN_PRIO_7,    CNT_TX_GREEN_PRIO_7,
              #endif // UNMANAGED_PORT_STATISTICS_QOS
C51 COMPILER V9.60.0.0   H2STATS                                                           11/30/2021 16:22:21 PAGE 5   

 237   1          };
 238   1          uchar j;
 239   1          uchar c;
 240   1          uchar display_header;
 241   1          uchar indentation;
 242   1          std_txt_t rx_txt_no;
 243   1          uchar spaces;
 244   1          std_txt_t tx_txt_no;
 245   1          ulong reg_addr;
 246   1          ulong reg_val;
 247   1      
 248   1          for (j = 0; j < NO_OF_LINES; j++) {
 249   2      
 250   2              /*
 251   2              ** Possibly display counter block header
 252   2              */
 253   2              display_header = FALSE;
 254   2              if (j == 0) {
 255   3                  /* Total counters */
 256   3                  display_header = TRUE;
 257   3                  indentation = 10;
 258   3                  rx_txt_no   = TXT_NO_RX_TOTAL;
 259   3                  spaces      = 25;
 260   3                  tx_txt_no   = TXT_NO_TX_TOTAL;
 261   3              } else if (j == SIZE_COUNTERS_START) {
 262   3                  /* Size counters */
 263   3                  display_header = TRUE;
 264   3                  indentation = 6;
 265   3                  rx_txt_no   = TXT_NO_RX_SIZE;
 266   3                  spaces      = 17;
 267   3                  tx_txt_no   = TXT_NO_TX_SIZE;
 268   3              } else if (j == ERROR_COUNTERS_START) {
 269   3                  /* Error counters */
 270   3                  display_header = TRUE;
 271   3                  indentation = 6;
 272   3                  rx_txt_no   = TXT_NO_RX_ERROR;
 273   3                  spaces      = 17;
 274   3                  tx_txt_no   = TXT_NO_TX_ERROR;
 275   3      #if UNMANAGED_PORT_STATISTICS_QOS
                      } else if (j == QOS_COUNTERS_START) {
                          /* QoS counters */
                          display_header = TRUE;
                          indentation = 6;
                          rx_txt_no   = TXT_NO_RX_QOS;
                          spaces      = 19;
                          tx_txt_no   = TXT_NO_TX_QOS;
              #endif // UNMANAGED_PORT_STATISTICS_QOS
 284   3              }
 285   2      
 286   2              if (display_header) {
 287   3                  print_cr_lf();
 288   3                  print_spaces(indentation);
 289   3                  print_txt(rx_txt_no);
 290   3                  print_spaces(spaces);
 291   3                  print_txt(tx_txt_no);
 292   3                  print_cr_lf();
 293   3      
 294   3                  print_spaces(indentation);
 295   3                  print_line(txt_len(rx_txt_no));
 296   3                  print_spaces(spaces);
 297   3                  print_line(txt_len(tx_txt_no));
 298   3                  print_cr_lf();
C51 COMPILER V9.60.0.0   H2STATS                                                           11/30/2021 16:22:21 PAGE 6   

 299   3              }
 300   2      
 301   2              /*
 302   2              ** Display 2 columns of counters
 303   2              */
 304   2              for (c = 0; c < 2; c++) {
 305   3                  reg_addr = display_tab_1[j].counter_id[c];
 306   3                  print_txt(prefix_txt[c & 0x01]);
 307   3                  print_txt_left(display_tab_1[j].txt_no[c], 23);
 308   3                  if (reg_addr != COUNTER_NONE) {
 309   4                      reg_val = h2_stats_counter_get(chip_port, reg_addr);
 310   4                      print_dec_right(reg_val);
 311   4                  } else {
 312   4                      print_str("         -");
 313   4                  }
 314   3                  print_spaces(2);
 315   3              }
 316   2              print_cr_lf();
 317   2      
 318   2              if (GPARM_break_show_statistic_flag) {
 319   3                  GPARM_break_show_statistic_flag = FALSE;
 320   3                  break;
 321   3              }
 322   2          }
 323   1      }
 324          #endif // UNMANAGED_PORT_STATISTICS_IF


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    692    ----
   CONSTANT SIZE    =    133    ----
   XDATA SIZE       =     25      26
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
