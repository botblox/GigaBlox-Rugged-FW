C51 COMPILER V9.60.0.0   H2GPIOS                                                           11/30/2021 16:22:21 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE H2GPIOS
OBJECT MODULE PLACED IN ..\obj\h2gpios.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\src\switch\h2gpios.c LARGE OPTIMIZE(9,SIZE) INCDIR(c:\keil\c51\inc\wi
                    -nbond;..\src\config;..\src\config\proj_opt;..\src\cli;..\src\main;..\src\switch;..\src\phy;..\src\util;..\src\switch\vts
                    -s_api\base;..\src\switch\vtss_api\base\ocelot;..\src\switch\include;..\src\lldp;..\src\snmp;..\src\sw_lacp;..\src\eee;..
                    -\src\eee\base\include;..\src\fan;..\src\led;..\src\loop) DEFINE(VTSS_ARCH_OCELOT,FERRET_F5,PROJ_OPT=0) DEBUG OBJECTEXTEN
                    -D PRINT(..\lst\h2gpios.lst) TABS(2) OBJECT(..\obj\h2gpios.obj)

line level    source

   1          /*
   2          
   3           Copyright (c) 2017 Microsemi Corporation "Microsemi".
   4          
   5           Permission is hereby granted, free of charge, to any person obtaining a copy
   6           of this software and associated documentation files (the "Software"), to deal
   7           in the Software without restriction, including without limitation the rights
   8           to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9           copies of the Software, and to permit persons to whom the Software is
  10           furnished to do so, subject to the following conditions:
  11          
  12           The above copyright notice and this permission notice shall be included in all
  13           copies or substantial portions of the Software.
  14          
  15           THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16           IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17           FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18           AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19           LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20           OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  21           SOFTWARE.
  22          
  23          */
  24          
  25          #include "common.h"     /* Always include common.h at the first place of user-defined herder files */
  26          
  27          #include "vtss_api_base_regs.h"
  28          #include "h2gpios.h"
  29          #include "h2io.h"
  30          #include "timer.h" // delay()
  31          
  32          /*****************************************************************************
  33           *
  34           *
  35           * Defines
  36           *
  37           *
  38           *
  39           ****************************************************************************/
  40          
  41          /*****************************************************************************
  42           *
  43           *
  44           * Typedefs and enums
  45           *
  46           *
  47           *
  48           ****************************************************************************/
  49          
  50          /*****************************************************************************
  51           *
C51 COMPILER V9.60.0.0   H2GPIOS                                                           11/30/2021 16:22:21 PAGE 2   

  52           *
  53           * Prototypes for local functions
  54           *
  55           *
  56           *
  57           ****************************************************************************/
  58          
  59          /*****************************************************************************
  60           *
  61           *
  62           * Public data
  63           *
  64           *
  65           *
  66           ****************************************************************************/
  67          
  68          
  69          
  70          /*****************************************************************************
  71           *
  72           *
  73           * Local data
  74           *
  75           *
  76           *
  77           ****************************************************************************/
  78          
  79          
  80          /* ************************************************************************ */
  81          void h2_gpio_mode_set(uchar gpio_no, vtss_gpio_mode_t mode)
  82          /* ------------------------------------------------------------------------ --
  83           * Purpose     :
  84           * Remarks     :
  85           * Restrictions:
  86           * See also    :
  87           * Example     :
  88           ****************************************************************************/
  89          {
  90   1          ulong mask = VTSS_BIT(gpio_no);
  91   1      
  92   1          H2_WRITE_MASKED(VTSS_DEVCPU_GCB_GPIO_GPIO_INTR_ENA, 0, mask); /* Disable IRQ */
  93   1          switch(mode) {
  94   2          case VTSS_GPIO_OUT:
  95   2          case VTSS_GPIO_IN:
  96   2          case VTSS_GPIO_IN_INT:
  97   2              H2_WRITE_MASKED(VTSS_DEVCPU_GCB_GPIO_GPIO_ALT(0), 0, mask); /* GPIO mode 0b00 */
  98   2              H2_WRITE_MASKED(VTSS_DEVCPU_GCB_GPIO_GPIO_ALT(1), 0, mask); /* -"- */
  99   2              H2_WRITE_MASKED(VTSS_DEVCPU_GCB_GPIO_GPIO_OE, mode == VTSS_GPIO_OUT ? mask : 0, mask);
 100   2              if (mode == VTSS_GPIO_IN_INT)
 101   2                  H2_WRITE_MASKED(VTSS_DEVCPU_GCB_GPIO_GPIO_INTR_ENA, mask, mask);
 102   2              break;
 103   2          case VTSS_GPIO_ALT_0:
 104   2              H2_WRITE_MASKED(VTSS_DEVCPU_GCB_GPIO_GPIO_ALT(0), mask, mask); /* GPIO mode 0b01 */
 105   2              H2_WRITE_MASKED(VTSS_DEVCPU_GCB_GPIO_GPIO_ALT(1), 0,    mask); /* -"- */
 106   2              break;
 107   2          case VTSS_GPIO_ALT_1:
 108   2              H2_WRITE_MASKED(VTSS_DEVCPU_GCB_GPIO_GPIO_ALT(0), 0,    mask); /* GPIO mode 0b10 */
 109   2              H2_WRITE_MASKED(VTSS_DEVCPU_GCB_GPIO_GPIO_ALT(1), mask, mask); /* -"- */
 110   2              break;
 111   2          }
 112   1      }
 113          
C51 COMPILER V9.60.0.0   H2GPIOS                                                           11/30/2021 16:22:21 PAGE 3   

 114          /* ************************************************************************ */
 115          uchar h2_gpio_read(uchar gpio_no)
 116          /* ------------------------------------------------------------------------ --
 117           * Purpose     :
 118           * Remarks     :
 119           * Restrictions:
 120           * See also    :
 121           * Example     :
 122           ****************************************************************************/
 123          {
 124   1          ulong mask = VTSS_BIT(gpio_no);
 125   1          ulong value;
 126   1          H2_READ(VTSS_DEVCPU_GCB_GPIO_GPIO_IN, value);
 127   1          return VTSS_BOOL(value & mask);
 128   1      }
 129          
 130          /* ************************************************************************ */
 131          void h2_gpio_write(uchar gpio_no, BOOL output_high)
 132          /* ------------------------------------------------------------------------ --
 133           * Purpose     :
 134           * Remarks     :
 135           * Restrictions:
 136           * See also    :
 137           * Example     :
 138           ****************************************************************************/
 139          {
 140   1      #if defined(VTSS_ARCH_OCELOT)
 141   1          if (output_high) {
 142   2              H2_WRITE_MASKED(VTSS_DEVCPU_GCB_GPIO_GPIO_OUT_SET,
 144   2                              VTSS_F_DEVCPU_GCB_GPIO_GPIO_OUT_SET_G_OUT_SET(VTSS_BIT(gpio_no)),
 144   2                              VTSS_M_DEVCPU_GCB_GPIO_GPIO_OUT_SET_G_OUT_SET);
 145   2          } else {
 146   2              H2_WRITE_MASKED(VTSS_DEVCPU_GCB_GPIO_GPIO_OUT_CLR,
 148   2                              VTSS_F_DEVCPU_GCB_GPIO_GPIO_OUT_CLR_G_OUT_CLR(VTSS_BIT(gpio_no)),
 148   2                              VTSS_M_DEVCPU_GCB_GPIO_GPIO_OUT_SET_G_OUT_SET);
 149   2          }
 150   1      
 151   1      #elif defined(VTSS_ARCH_LUTON26)
                  ulong mask = VTSS_BIT(gpio_no);
                  if (output_high) {
                      H2_WRITE(VTSS_DEVCPU_GCB_GPIO_GPIO_OUT_SET, mask);
                  } else {
                      H2_WRITE(VTSS_DEVCPU_GCB_GPIO_GPIO_OUT_CLR, mask);
                  }
              #endif // VTSS_ARCH_OCELOT
 159   1      }
 160          
 161          #if defined(LUTON26_L10)
              /* ************************************************************************ */
              uchar h2_sgpio_read(uchar sgpio_no, uchar bit_no)
              /* ------------------------------------------------------------------------ --
               * Purpose     :
               * Remarks     :
               * Restrictions:
               * See also    :
               * Example     :
               ****************************************************************************/
              {
                  ulong mask = VTSS_BIT(sgpio_no);
                  ulong value;
                  H2_READ(VTSS_DEVCPU_GCB_SIO_CTRL_SIO_INPUT_DATA(bit_no), value);
                  return VTSS_BOOL(value & mask);
C51 COMPILER V9.60.0.0   H2GPIOS                                                           11/30/2021 16:22:21 PAGE 4   

              }
              #endif
 178          
 179          /* ************************************************************************ */
 180          void h2_sgpio_write(uchar sgpio_no, uchar bit_no, ushort mode)
 181          /* ------------------------------------------------------------------------ --
 182           * Purpose     :
 183           * Remarks     :
 184           * Restrictions:
 185           * See also    :
 186           * Example     :
 187           ****************************************************************************/
 188          {
 189   1      #if defined(VTSS_ARCH_OCELOT)
 190   1          BOOL inversed_polarity = FALSE; /* (needs to refer to hardware schematic) */
 191   1      #endif
 192   1      
 193   1          switch (bit_no) {
 194   2      #if defined(VTSS_ARCH_LUTON26)
                  case VTSS_SGPIO_BIT_0:
                      H2_WRITE_MASKED(VTSS_DEVCPU_GCB_SIO_CTRL_SIO_PORT_CONFIG(sgpio_no), mode, 0x007);
                      break;
                  case VTSS_SGPIO_BIT_1:
                      H2_WRITE_MASKED(VTSS_DEVCPU_GCB_SIO_CTRL_SIO_PORT_CONFIG(sgpio_no), mode << 3, 0x038);
                      break;
                  case VTSS_SGPIO_BIT_2:
                      H2_WRITE_MASKED(VTSS_DEVCPU_GCB_SIO_CTRL_SIO_PORT_CONFIG(sgpio_no), mode << 6, 0x1c0);
                      break;
                  case VTSS_SGPIO_BIT_3:
                      H2_WRITE_MASKED(VTSS_DEVCPU_GCB_SIO_CTRL_SIO_PORT_CONFIG(sgpio_no), mode << 9, 0xe00);
                      break;
              
              #elif defined(VTSS_ARCH_OCELOT)
 209   2          /* Inversed polarity (needs to refer to hardware schematic) */
 210   2          case VTSS_SGPIO_BIT_0:
 211   2              H2_WRITE_MASKED(VTSS_DEVCPU_GCB_SIO_CTRL_SIO_PORT_CFG(sgpio_no),
 215   2                              VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_PORT_CFG_BIT_SOURCE(mode) |
 215   2                              VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_PORT_CFG_BIT_POLARITY(inversed_polarity),
 215   2                              VTSS_ENCODE_BITMASK(12, 3) |
 215   2                              VTSS_ENCODE_BITMASK(0, 1));
 216   2              break;
 217   2          case VTSS_SGPIO_BIT_1:
 218   2              H2_WRITE_MASKED(VTSS_DEVCPU_GCB_SIO_CTRL_SIO_PORT_CFG(sgpio_no),
 222   2                              VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_PORT_CFG_BIT_SOURCE(mode << 3) |
 222   2                              VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_PORT_CFG_BIT_POLARITY(inversed_polarity << 1),
 222   2                              VTSS_ENCODE_BITMASK(15, 3) |
 222   2                              VTSS_ENCODE_BITMASK(1, 1));
 223   2              break;
 224   2          case VTSS_SGPIO_BIT_2:
 225   2              H2_WRITE_MASKED(VTSS_DEVCPU_GCB_SIO_CTRL_SIO_PORT_CFG(sgpio_no),
 229   2                              VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_PORT_CFG_BIT_SOURCE(mode << 6) |
 229   2                              VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_PORT_CFG_BIT_POLARITY(inversed_polarity << 2),
 229   2                              VTSS_ENCODE_BITMASK(18, 3) |
 229   2                              VTSS_ENCODE_BITMASK(2, 1));
 230   2              break;
 231   2          case VTSS_SGPIO_BIT_3:
 232   2              H2_WRITE_MASKED(VTSS_DEVCPU_GCB_SIO_CTRL_SIO_PORT_CFG(sgpio_no),
 236   2                              VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_PORT_CFG_BIT_SOURCE(mode << 9) |
 236   2                              VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_PORT_CFG_BIT_POLARITY(inversed_polarity << 3),
 236   2                              VTSS_ENCODE_BITMASK(21, 3) |
 236   2                              VTSS_ENCODE_BITMASK(3, 1));
 237   2              break;
C51 COMPILER V9.60.0.0   H2GPIOS                                                           11/30/2021 16:22:21 PAGE 5   

 238   2      #endif // End of defined(VTSS_ARCH_LUTON26)
 239   2      
 240   2          default:
 241   2              break;
 242   2          }
 243   1      
 244   1          delay_1(1);
 245   1      }
 246          
 247          #if !defined(FRONT_LED_PRESENT)
              /* Set system LED
               * Only light system LED when FRONT_LED_PRESENT is undefined
               */
              static void _h2_sgpio_sys_led_init(void)
              {
              #if defined(FERRET_F11) || defined(FERRET_F10P) || defined(FERRET_F5) || defined(FERRET_F4P)
                  // Light system LED: Green (needs to refer to hardware schematic)
                  // 2 SGPIO per port
                  // bit[1:0] 00 => yellow, 01 => red, 10 => green, 11 => off
                  h2_sgpio_write(SYS_LED_SGPIO_PORT, 0, VTSS_SGPIO_MODE_OFF);
                  h2_sgpio_write(SYS_LED_SGPIO_PORT, 1, VTSS_SGPIO_MODE_ON);
              #endif
              }
              #endif // !FRONT_LED_PRESENT
 262          
 263          /* ************************************************************************ */
 264          void h2_sgpio_enable(void)
 265          /* ------------------------------------------------------------------------ --
 266           * Purpose     :
 267           * Remarks     :
 268           * Restrictions:
 269           * See also    :
 270           * Example     :
 271           ****************************************************************************/
 272          {
 273   1          uchar gpio;
 274   1      
 275   1          /* Setup SGPIO pins.
 276   1           * Before using SGPIO, we need to enable GPIO 0-3 as SGPIO pins. (needs to refer to hardware schematic
             -)
 277   1           */
 278   1          for (gpio = 0; gpio < 4; gpio++) {
 279   2              h2_gpio_mode_set(gpio, VTSS_GPIO_ALT_0);
 280   2          }
 281   1      
 282   1      #if defined(VTSS_ARCH_LUTON26)
                  /* Setup SGPIO configuration */
                  H2_WRITE(VTSS_DEVCPU_GCB_SIO_CTRL_SIO_CONFIG,
                           VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_CONFIG_SIO_BMODE_0(3UL) |
                           VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_CONFIG_SIO_BMODE_1(1) | /* 10Hz */
                           VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_CONFIG_SIO_BURST_GAP(0x1F) |
                           VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_CONFIG_SIO_PORT_WIDTH(0x1) |
                           /* VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_CONFIG_SIO_LD_POLARITY | */
                           VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_CONFIG_SIO_AUTO_REPEAT);
              
                  /* Setup the SGPIO clock (needs to be between 1MHz and 10MHz) */
                  H2_WRITE(VTSS_DEVCPU_GCB_SIO_CTRL_SIO_CLOCK,
                           VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_CLOCK_SIO_CLK_FREQ(50));
              #elif defined(FERRET_F11) || defined(FERRET_F10P) || defined(FERRET_F5) || defined(FERRET_F4P)
 296   1          /* Setup SGPIO configuration
 297   1           * SIO_PORT_WIDTH   : 2 SGPIO per port (needs to refer to hardware schematic)
 298   1           * SIO_BMODE_0      : Blink speed to 0.625Hz
C51 COMPILER V9.60.0.0   H2GPIOS                                                           11/30/2021 16:22:21 PAGE 6   

 299   1           * SIO_BMODE_1      : Blink speed to 10Hz
 300   1           * IO_BURST_GAP_DIS : Enable burst gap
 301   1           * SIO_BURST_GAP    : Burst gap to 53.69 ms
 302   1           * SIO_LD_POLARITY  : Active low mode (needs to refer to hardware schematic)
 303   1           * AUTO_REPEAT      : Enable
 304   1           */
 305   1          H2_WRITE(VTSS_DEVCPU_GCB_SIO_CTRL_SIO_CFG,
 312   1                   VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_CFG_SIO_PORT_WIDTH(1) |
 312   1                   VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_CFG_SIO_BMODE_0(3) |
 312   1                   VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_CFG_SIO_BMODE_1(1) |
 312   1                   VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_CFG_SIO_BURST_GAP_DIS(0) |
 312   1                   VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_CFG_SIO_BURST_GAP(31) |
 312   1                   VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_CFG_SIO_LD_POLARITY(0) |
 312   1                   VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_CFG_SIO_AUTO_REPEAT(1));
 313   1      
 314   1          /* Setup the SGPIO clock (needs to be between 1MHz and 10MHz) */
 315   1          H2_WRITE_MASKED(VTSS_DEVCPU_GCB_SIO_CTRL_SIO_CLOCK,
 317   1                          VTSS_F_DEVCPU_GCB_SIO_CTRL_SIO_CLOCK_SIO_CLK_FREQ(50),
 317   1                          VTSS_M_DEVCPU_GCB_SIO_CTRL_SIO_CLOCK_SIO_CLK_FREQ);
 318   1      #endif
 319   1      
 320   1          /* Enable SGPIO ports (needs to refer to hardware schematic) */
 321   1      #if defined(VTSS_ARCH_LUTON26)
                  H2_WRITE(VTSS_DEVCPU_GCB_SIO_CTRL_SIO_PORT_ENABLE, LED_PORTS);
              #elif defined(FERRET_F11) || defined(FERRET_F10P) || defined(FERRET_F5) || defined(FERRET_F4P)
 324   1          H2_WRITE(VTSS_DEVCPU_GCB_SIO_CTRL_SIO_PORT_ENA, LED_PORTS);
 325   1      #endif
 326   1      
 327   1      #if defined(FERRET_F11) || defined(FERRET_F10P) || defined(FERRET_F5) || defined(FERRET_F4P)
 328   1          // Light off all front ports
 329   1          for (gpio = 0; gpio < NO_OF_CHIP_PORTS; gpio++) {
 330   2              if (VTSS_EXTRACT_BITFIELD(LED_PORTS, gpio, 1)) {
 331   3                  h2_sgpio_write(gpio, 0, VTSS_SGPIO_MODE_ON);
 332   3                  h2_sgpio_write(gpio, 1, VTSS_SGPIO_MODE_ON);
 333   3              }
 334   2          }
 335   1      #endif // FERRET_F11 || FERRET_F10P || FERRET_F5 || FERRET_F4P
 336   1      
 337   1      #if !defined(FRONT_LED_PRESENT)
                  _h2_sgpio_sys_led_init();
              #endif // !FRONT_LED_PRESENT
 340   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1010    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      19
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
