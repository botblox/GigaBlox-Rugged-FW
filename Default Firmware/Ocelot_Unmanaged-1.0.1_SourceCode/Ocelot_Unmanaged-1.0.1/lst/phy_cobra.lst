C51 COMPILER V9.60.0.0   PHY_COBRA                                                         11/30/2021 16:22:25 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PHY_COBRA
OBJECT MODULE PLACED IN ..\obj\phy_cobra.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\src\phy\phy_cobra.c LARGE OPTIMIZE(9,SIZE) INCDIR(c:\keil\c51\inc\win
                    -bond;..\src\config;..\src\config\proj_opt;..\src\cli;..\src\main;..\src\switch;..\src\phy;..\src\util;..\src\switch\vtss
                    -_api\base;..\src\switch\vtss_api\base\ocelot;..\src\switch\include;..\src\lldp;..\src\snmp;..\src\sw_lacp;..\src\eee;..\
                    -src\eee\base\include;..\src\fan;..\src\led;..\src\loop) DEFINE(VTSS_ARCH_OCELOT,FERRET_F5,PROJ_OPT=0) DEBUG OBJECTEXTEND
                    - PRINT(..\lst\phy_cobra.lst) TABS(2) OBJECT(..\obj\phy_cobra.obj)

line level    source

   1          /*
   2          
   3           Copyright (c) 2017 Microsemi Corporation "Microsemi".
   4          
   5           Permission is hereby granted, free of charge, to any person obtaining a copy
   6           of this software and associated documentation files (the "Software"), to deal
   7           in the Software without restriction, including without limitation the rights
   8           to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9           copies of the Software, and to permit persons to whom the Software is
  10           furnished to do so, subject to the following conditions:
  11          
  12           The above copyright notice and this permission notice shall be included in all
  13           copies or substantial portions of the Software.
  14          
  15           THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16           IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17           FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18           AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19           LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20           OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  21           SOFTWARE.
  22          
  23          */
  24          
  25          
  26          #include "common.h"     /* Always include common.h at the first place of user-defined herder files */
  27          #include "timer.h"
  28          #include "print.h"
  29          #include "hwport.h"
  30          #include "phymap.h"
  31          #include "phydrv.h"
  32          #include "phy_base.h"
  33          #include "phy_family.h"
  34          
  35          #define PHY_DEBUG (0)
  36          
  37          #if VTSS_COBRA
              
              /****************************************************************************
               *
               *
               * Defines
               *
               *
               ****************************************************************************/
              
              /****************************************************************************
               *
               *
               * Typedefs and enums
               *
C51 COMPILER V9.60.0.0   PHY_COBRA                                                         11/30/2021 16:22:25 PAGE 2   

               *
               ****************************************************************************/
              
              
              /*****************************************************************************
               *
               *
               * Prototypes for local functions
               *
               *
               *
               ****************************************************************************/
              
              /*****************************************************************************
               *
               *
               * Local data
               *
               *
               *
               ****************************************************************************/
              
              
              /*****************************************************************************
               *
               *
               * PHY initialization sequences
               *
               *
               *
               ****************************************************************************/
              vtss_rc cobra_mac_media_if_setup(vtss_port_no_t port_no, const vtss_phy_reset_conf_t *const conf)
              {
                  u16 reg = 0;
                  u16 mac_media_mode_sel_15_12 = 0x0; // Mac/Media interface mode selct bits 15:12 - Datasheet table 36
                  u16 mac_media_mode_sel_2_1 = 0x0;   // Mac/Media interface mode selct bits 2:1 - Datasheet table 36
              #if PHY_DEBUG
                  print_str("cobra_mac_media_if_setup: conf->mac_if=");
                  print_hex_dw(conf->mac_if);
                  print_str(",conf->media_if=");
                  print_hex_dw(conf->media_if);
                  print_cr_lf();
              #endif
                  switch (conf->mac_if) {
              
                  case VTSS_PORT_INTERFACE_SGMII:
                      switch (conf->media_if) {
                      case VTSS_PHY_MEDIA_IF_CU:
                          mac_media_mode_sel_15_12 = 0xB;
                          mac_media_mode_sel_2_1   = 0x0;
                          break;
                      case VTSS_PHY_MEDIA_IF_FI_1000BX:
                      case VTSS_PHY_MEDIA_IF_SFP_PASSTHRU:
                          mac_media_mode_sel_15_12 = 0x9;
                          mac_media_mode_sel_2_1   = 0x1;
                          break;
                      default:
                          goto conf_error;
                      }
                      break;
              
              
C51 COMPILER V9.60.0.0   PHY_COBRA                                                         11/30/2021 16:22:25 PAGE 3   

                  case VTSS_PORT_INTERFACE_RGMII:
                      switch (conf->media_if) {
                      case VTSS_PHY_MEDIA_IF_CU:
                          mac_media_mode_sel_15_12 = 0x1;
                          mac_media_mode_sel_2_1   = 0x2;
                          break;
                      case VTSS_PHY_MEDIA_IF_FI_1000BX:
                      case VTSS_PHY_MEDIA_IF_FI_100FX:
                          mac_media_mode_sel_15_12 = 0x1;
                          mac_media_mode_sel_2_1   = 0x1;
                          break;
                      case VTSS_PHY_MEDIA_IF_AMS_CU_1000BX:
                      case VTSS_PHY_MEDIA_IF_AMS_CU_100FX:
                          mac_media_mode_sel_15_12 = 0x0;
                          mac_media_mode_sel_2_1   = 0x2;
                          break;
                      case VTSS_PHY_MEDIA_IF_AMS_FI_1000BX:
                      case VTSS_PHY_MEDIA_IF_AMS_FI_100FX:
                          mac_media_mode_sel_15_12 = 0x0;
                          mac_media_mode_sel_2_1   = 0x1;
                          break;
                      default:
                          goto conf_error;
                      }
                      break;
              
                  case VTSS_PORT_INTERFACE_RTBI:
                      switch (conf->media_if) {
                      case VTSS_PHY_MEDIA_IF_CU:
                          mac_media_mode_sel_15_12 = 0x4;
                          mac_media_mode_sel_2_1   = 0x0;
                          break;
                      case VTSS_PHY_MEDIA_IF_FI_1000BX:
                      case VTSS_PHY_MEDIA_IF_FI_100FX:
                          mac_media_mode_sel_15_12 = 0x5;
                          mac_media_mode_sel_2_1   = 0x1;
                          break;
                      default:
                          goto conf_error;
                      }
                      break;
              
              
                  case VTSS_PORT_INTERFACE_TBI:
                      switch (conf->media_if) {
                      case VTSS_PHY_MEDIA_IF_CU:
                          mac_media_mode_sel_15_12 = 0x6;
                          mac_media_mode_sel_2_1   = 0x0;
                          break;
                      case VTSS_PHY_MEDIA_IF_FI_1000BX:
                      case VTSS_PHY_MEDIA_IF_FI_100FX:
                          mac_media_mode_sel_15_12 = 0x7;
                          mac_media_mode_sel_2_1   = 0x1;
                          break;
                      default:
                          goto conf_error;
                      }
                      break;
              
              
              
                  case VTSS_PORT_INTERFACE_GMII:
C51 COMPILER V9.60.0.0   PHY_COBRA                                                         11/30/2021 16:22:25 PAGE 4   

                      switch (conf->media_if) {
                      case VTSS_PHY_MEDIA_IF_CU:
                          mac_media_mode_sel_15_12 = 0x3;
                          mac_media_mode_sel_2_1   = 0x2;
                          break;
                      case VTSS_PHY_MEDIA_IF_FI_1000BX:
                      case VTSS_PHY_MEDIA_IF_FI_100FX:
                          mac_media_mode_sel_15_12 = 0x3;
                          mac_media_mode_sel_2_1   = 0x1;
                          break;
                      case VTSS_PHY_MEDIA_IF_AMS_CU_1000BX:
                      case VTSS_PHY_MEDIA_IF_AMS_CU_100FX:
                          mac_media_mode_sel_15_12 = 0x2;
                          mac_media_mode_sel_2_1   = 0x2;
                          break;
                      case VTSS_PHY_MEDIA_IF_AMS_FI_1000BX:
                      case VTSS_PHY_MEDIA_IF_AMS_FI_100FX:
                          mac_media_mode_sel_15_12 = 0x2;
                          mac_media_mode_sel_2_1   = 0x1;
                          break;
                      default:
                          goto conf_error;
                      }
                      break;
              
                  case VTSS_PORT_INTERFACE_SERDES:
                      switch (conf->media_if) {
                      case VTSS_PHY_MEDIA_IF_CU:
                          mac_media_mode_sel_15_12 = 0xF;
                          mac_media_mode_sel_2_1   = 0x0;
                          break;
                      case VTSS_PHY_MEDIA_IF_SFP_PASSTHRU:
                      case VTSS_PHY_MEDIA_IF_AMS_CU_1000BX:
                          mac_media_mode_sel_15_12 = 0x9;
                          mac_media_mode_sel_2_1   = 0x1;
                          break;
                      default:
                          goto conf_error;
                      }
                      break;
                  default:
                      goto conf_error;
                  }
              
              
                  // Do the register (address 0x23)  write
                  reg = 0x0a20; // Setup skew and RX idle clock, datasheet table 36.
                  reg |= mac_media_mode_sel_15_12 << 12;
                  reg |= mac_media_mode_sel_2_1 << 1;
              
                  VTSS_RC(vtss_phy_wr(port_no, VTSS_PHY_EXTENDED_PHY_CONTROL, reg));
                  return VTSS_RC_OK;
              
              
              // Configuration error.
              conf_error:
                  println_str("Cobra family Media interface not supported for mac if");
                  return VTSS_RC_ERROR;
              }
              
              
              /* Init Scripts for VSC8211/VSC8221 aka Cobra */
C51 COMPILER V9.60.0.0   PHY_COBRA                                                         11/30/2021 16:22:25 PAGE 5   

              vtss_rc cobra_init_seq(vtss_port_no_t port_no)
              {
              #if PHY_DEBUG
                  println_str("cobra_init_seq");  
              #endif
                  /* Enable token-ring register access for entire init script */
                  VTSS_RC(phy_page_tp( port_no));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 8, 0x0200, 0x0200));
                //  VTSS_RC(vtss_phy_page_tr( port_no));
                  VTSS_RC(vtss_phy_wr(port_no, 31, 0x52B5));
              
                  /* BZ 1769 */
                  /* Performance robustness improvement on 50m loops */
                  VTSS_RC(vtss_phy_wr( port_no, 0, 0xafa4));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 2, 0x0000, 0x0000));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 1, 0x4000, 0xf000));
                  VTSS_RC(vtss_phy_wr( port_no, 0, 0x8fa4));
              
                  /* BZ 2337 */
                  /* Inter-operability with Intel 82547E1 L322SQ96 */
                  VTSS_RC(vtss_phy_wr( port_no, 0, 0xafae));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 2, 0x0000, 0x0000));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 1, 0x0600, 0x7f80));
                  VTSS_RC(vtss_phy_wr( port_no, 0, 0x8fae));
                  VTSS_RC(vtss_phy_page_std( port_no));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 18, 0x0040, 0x0040));
              //    VTSS_RC(vtss_phy_page_tr( port_no));
                  VTSS_RC(vtss_phy_wr(port_no, 31, 0x52B5));
                  /* BZ 1800 */
                  /* 100BT Jumbo packet mode script */
                  VTSS_RC(vtss_phy_wr( port_no, 0, 0xb786));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 2, 0x0000, 0x0000));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 1, 0x0e20, 0x1fe0));
                  VTSS_RC(vtss_phy_wr( port_no, 0, 0x9786));
              
                  /* BZ 2331 */
                  /* Insufficient RGMII drive strength on long traces */
                  VTSS_RC(phy_page_tp( port_no));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 3, 0x2000, 0x2000));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 3, 0x1080, 0x1ff8));
              //    VTSS_RC(vtss_phy_page_tr( port_no));
                  VTSS_RC(vtss_phy_wr(port_no, 31, 0x52B5));
                  /* BZ 2232 */
                  /* DSP Optimization script */
                  VTSS_RC(vtss_phy_wr( port_no, 0, 0xaf8a));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 2, 0x0000, 0x0000));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 1, 0x0008, 0x000c));
                  VTSS_RC(vtss_phy_wr( port_no, 0, 0x8f8a));
                  VTSS_RC(vtss_phy_wr( port_no, 0, 0xaf86));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 2, 0x0008, 0x000c));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 1, 0x0000, 0x0000));
                  VTSS_RC(vtss_phy_wr( port_no, 0, 0x8f86));
                  VTSS_RC(vtss_phy_wr( port_no, 0, 0xaf82));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 2, 0x0000, 0x0000));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 1, 0x0100, 0x0180));
                  VTSS_RC(vtss_phy_wr( port_no, 0, 0x8f82));
              
                  /* New bugzilla 11377 */
                  /* Forced-10BASE-T PHY falsely linking up with forced-100BASE-TX link partner */
                  VTSS_RC(vtss_phy_wr( port_no, 0, 0xa7f4));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 2, 0x0000, 0x0000));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 1, 0x0002, 0x0006));
C51 COMPILER V9.60.0.0   PHY_COBRA                                                         11/30/2021 16:22:25 PAGE 6   

                  VTSS_RC(vtss_phy_wr( port_no, 0, 0x87f4));
                  VTSS_RC(vtss_phy_wr( port_no, 0, 0xa7f8));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 2, 0x0000, 0x0000));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 1, 0x0800, 0x0800));
                  VTSS_RC(vtss_phy_wr( port_no, 0, 0x87f8));
              
                  /* Restore normal clock gating and return to main page after init script */
                  VTSS_RC(phy_page_tp( port_no));
                  VTSS_RC(vtss_phy_wr_masked( port_no, 8, 0x0000, 0x0200));
                  VTSS_RC(vtss_phy_page_std( port_no));
              
                  /* Enable Smart Pre-emphasis */
                  VTSS_RC(vtss_phy_enab_smrt_premphasis(port_no));
              
                  return VTSS_RC_OK;
              }
              
              void cobra_power_saving_disable(vtss_cport_no_t chip_port)
              {
                  phy_id_t phy_id;
              
                  /* Disable Power Savings */
                  phy_read_id(chip_port, &phy_id);
                  if (phy_map(chip_port) && (phy_id.family == VTSS_PHY_FAMILY_COBRA)) {
                      phy_page_tp(chip_port);
                      phy_write_masked(chip_port, 12, 0x0000, 0xfc00);
                      phy_write_masked(chip_port, 24, 0x2000, 0x2000);
                      phy_page_std(chip_port);
                      phy_write_masked(chip_port, 28, 0x0000, 0x0040);
                      phy_write_masked(chip_port, 0, 0x8000, 0x8000);
                      delay_1(2);
                  }
              }
              
              #endif
 335          
 336          /****************************************************************************/
 337          /*                                                                          */
 338          /*  End of file.                                                            */
 339          /*                                                                          */
 340          /****************************************************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
