C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE H2SDCFG
OBJECT MODULE PLACED IN ..\obj\h2sdcfg.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\src\switch\h2sdcfg.c LARGE OPTIMIZE(9,SIZE) INCDIR(c:\keil\c51\inc\wi
                    -nbond;..\src\config;..\src\config\proj_opt;..\src\cli;..\src\main;..\src\switch;..\src\phy;..\src\util;..\src\switch\vts
                    -s_api\base;..\src\switch\vtss_api\base\ocelot;..\src\switch\include;..\src\lldp;..\src\snmp;..\src\sw_lacp;..\src\eee;..
                    -\src\eee\base\include;..\src\fan;..\src\led;..\src\loop) DEFINE(VTSS_ARCH_OCELOT,FERRET_F5,PROJ_OPT=0) DEBUG OBJECTEXTEN
                    -D PRINT(..\lst\h2sdcfg.lst) TABS(2) OBJECT(..\obj\h2sdcfg.obj)

line level    source

   1          /*
   2          
   3           Copyright (c) 2017 Microsemi Corporation "Microsemi".
   4          
   5           Permission is hereby granted, free of charge, to any person obtaining a copy
   6           of this software and associated documentation files (the "Software"), to deal
   7           in the Software without restriction, including without limitation the rights
   8           to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9           copies of the Software, and to permit persons to whom the Software is
  10           furnished to do so, subject to the following conditions:
  11          
  12           The above copyright notice and this permission notice shall be included in all
  13           copies or substantial portions of the Software.
  14          
  15           THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16           IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17           FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18           AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19           LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20           OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  21           SOFTWARE.
  22          
  23          */
  24          
  25          #include "common.h"     /* Always include common.h at the first place of user-defined herder files */
  26          #include "vtss_api_base_regs.h"
  27          #include "h2sdcfg.h"
  28          #include "timer.h" // For dealy_1()
  29          #include "misc2.h"
  30          #include "h2io.h"
  31          #ifndef NDEBUG
              #include "print.h"
              #endif
  34          
  35          /*****************************************************************************
  36           *
  37           *
  38           * Defines
  39           *
  40           *
  41           *
  42           ****************************************************************************/
  43          #if defined(H2_SD6G_DEBUG_ENABLE)
              #include "print.h"
              #endif /* H2_SD6G_DEBUG_ENABLE */
  46          
  47          #define RCOMP_CFG0 VTSS_IOREG(VTSS_TO_MACRO_CTRL,0x8)
  48          
  49          
  50          
  51          // Defines for better be able to share code from the managed system.
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 2   

  52          #define L26_WRM H2_WRITE_MASKED
  53          #define L26_WR H2_WRITE
  54          #define L26_RD(reg, value) H2_READ(reg, *value)
  55          #define u32 ulong
  56          #define l26_wr h2_write
  57          #define VTSS_RC(x) x
  58          #define l26_sd6g_write(addr, wait) h2_sd6g_write(addr)
  59          #define l26_sd1g_write(addr, wait) h2_sd1g_write(addr)
  60          #define L26_WRM_SET(reg, bit) H2_WRITE_MASKED(reg, bit, bit)
  61          #define L26_WRM_CLR(reg, bit) H2_WRITE_MASKED(reg, 0, bit)
  62          
  63          /*****************************************************************************
  64           *
  65           *
  66           * Typedefs and enums
  67           *
  68           *
  69           *
  70           ****************************************************************************/
  71          
  72          /*****************************************************************************
  73           *
  74           *
  75           * Prototypes for local functions
  76           *
  77           *
  78           *
  79           ****************************************************************************/
  80          
  81          
  82          /*****************************************************************************
  83           *
  84           *
  85           * Local data
  86           *
  87           *
  88           *
  89           ****************************************************************************/
  90          
  91          /* ************************************************************************ */
  92          void h2_sd6g_write(ulong addr)
  93          /* ------------------------------------------------------------------------ --
  94           * Purpose     : Serdes6G write data
  95           * Remarks     :
  96           * Restrictions:
  97           * See also    :
  98           * Example     :
  99           ****************************************************************************/
 100          {
 101   1          ulong dat;
 102   1      
 103   1      #if defined(VTSS_ARCH_LUTON26)
                  ulong mask;
              
                  mask = VTSS_F_MACRO_CTRL_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG_SERDES6G_WR_ONE_SHOT;
              
                  /* Transfers data from MCB master (CSR target) to MCB slave */
                  H2_WRITE(VTSS_MACRO_CTRL_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG,
                          VTSS_F_MACRO_CTRL_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG_SERDES6G_ADDR(addr) | mask);
              
                  do { /* Wait until write operation is completed  */
                      H2_READ(VTSS_MACRO_CTRL_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG, dat);
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 3   

                  } while(dat & mask);
                  delay_1(2);
              
              #elif defined(VTSS_ARCH_OCELOT)
 118   1          // EA = 0; // Disable interrupt while writing the date via serial Macro Configuration Bus (MCB)
 119   1          H2_WRITE(VTSS_HSIO_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG,
 121   1                   VTSS_F_HSIO_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG_SERDES6G_ADDR(addr) |
 121   1                   VTSS_F_HSIO_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG_SERDES6G_WR_ONE_SHOT(1));
 122   1      
 123   1          /* Wait until write operation is completed  */
 124   1          do {
 125   2              H2_READ(VTSS_HSIO_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG, dat);
 126   2          } while(VTSS_X_HSIO_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG_SERDES6G_WR_ONE_SHOT(dat));
 127   1          // EA = 1; // Enable interrupt
 128   1      #endif
 129   1      }
 130          
 131          /* ************************************************************************ */
 132          void h2_sd6g_read(ulong addr)
 133          /* ------------------------------------------------------------------------ --
 134           * Purpose     : Serdes6G write data
 135           * Remarks     :
 136           * Restrictions:
 137           * See also    :
 138           * Example     :
 139           ****************************************************************************/
 140          {
 141   1          ulong dat;
 142   1      
 143   1      #if defined(VTSS_ARCH_LUTON26)
                  ulong mask;
              
                  mask = VTSS_F_MACRO_CTRL_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG_SERDES6G_RD_ONE_SHOT;
              
                  /* Transfers data from MCB master (CSR target) to MCB slave */
                  H2_WRITE(VTSS_MACRO_CTRL_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG,
                          VTSS_F_MACRO_CTRL_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG_SERDES6G_ADDR(addr) | mask);
              
                  do { /* Wait until write operation is completed  */
                      H2_READ(VTSS_MACRO_CTRL_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG, dat);
                  } while(dat & mask);
                  delay_1(2);
              
              #elif defined(VTSS_ARCH_OCELOT)
 158   1          // EA = 0; // Disable interrupt while reading the date via serial Macro Configuration Bus (MCB)
 159   1          H2_WRITE(VTSS_HSIO_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG,
 161   1                   VTSS_F_HSIO_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG_SERDES6G_ADDR(addr) |
 161   1                   VTSS_F_HSIO_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG_SERDES6G_RD_ONE_SHOT(1));
 162   1      
 163   1          /* Wait until write operation is completed  */
 164   1          do {
 165   2              H2_READ(VTSS_HSIO_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG, dat);
 166   2          } while(VTSS_X_HSIO_MCB_SERDES6G_CFG_MCB_SERDES6G_ADDR_CFG_SERDES6G_RD_ONE_SHOT(dat));
 167   1          // EA = 1; // Enable interrupt
 168   1      #endif
 169   1      }
 170          
 171          /* ************************************************************************ */
 172          void h2_sd6g_cfg(vtss_serdes_mode_t mode, ulong addr)
 173          /* ------------------------------------------------------------------------ --
 174           * Purpose     : Serdes6G setup (Disable/2G5/QSGMII/SGMII)
 175           * Remarks     :
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 4   

 176           * Restrictions:
 177           * See also    :
 178           * Example     :
 179           ****************************************************************************/
 180          #if defined(VTSS_ARCH_LUTON26)
              {
                  u32 ib_rf=0, ctrl_data=0, if_mode=1, ob_ena_cas=0, ob_lev=0, ib_vbac=5, ib_vbcom=4, rcomp_val=0, ob_po
             -st_0=0, ib_ic_ac=0, ib_c=15, ib_chf=0;
                  u32 ob_sr = 7;
                  BOOL ena_lane=1, ena_rot=0, qrate=0, hrate=0, ob_ena1v=0, if_100fx=0, ib_cterm_ena=0;
              
              
              //  VTSS_D("addr: 0x%lx, mode: %s", addr, l26_serdes_mode_txt(mode));
                  ob_ena1v = 1; /* Based on Ref board design */
                  ib_cterm_ena = 1; /* Based on Ref board design */
              
                  switch (mode) {
                  case VTSS_SERDES_MODE_2G5:
                      /* Seredes6g_ob_cfg  */
                      ob_post_0 = 2;
                      /* Seredes6g_ob_cfg1 */
                      ob_ena_cas = 1;
                      ob_lev = ob_ena1v ? 48 : 63;
                      /* Seredes6g_des_cfg --> see code */
                      /* Seredes6g_ib_cfg */
                      ib_ic_ac = ob_ena1v ? 2 : 0;
                      ib_vbac  = ob_ena1v ? 4 : 5;
                      ib_rf    = ob_ena1v ? 2 : 10;
                      ib_vbcom = ob_ena1v ? 4 : 5;
                      /* Seredes6g_ib_cfg1 */
                      ib_c = ob_ena1v ? 6 : 10;
                      ib_chf = ob_ena1v ? 1 : 0;
                      /* Seredes6g_pll_cfg */
                      ena_rot = 1;
                      ctrl_data = 48;
                      /* Seredes6g_common_cfg */
                      qrate = 0;
                      hrate = 1;
                      break;
                  case VTSS_SERDES_MODE_QSGMII:
                      /* Seredes6g_ob_cfg  */
                      ob_sr = 0; /* Based on Ref board design */
                      ob_post_0 = 2;  /* Based on Ref board design */
                      /* Seredes6g_ob_cfg1 */
                      ob_ena_cas = 1;
                      ob_lev = 24;
                      /* Seredes6g_ib_cfg */
                      ib_rf = 4;
                      /* Seredes6g_ib_cfg1 */
                      ib_c = 4;
                      /* Seredes6g_pll_cfg */
                      /* Seredes6g_pll_cfg */
                      ctrl_data = 120;
                      if_mode = 3;
                      qrate = 0;
                      hrate = 0;
                      break;
                  case VTSS_SERDES_MODE_SGMII:
                      ob_lev = 48;
                      ob_ena_cas = 2;
                      ib_rf = 15;
                      ctrl_data = 60;
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 5   

                      qrate = 1;
                      hrate = 0;
                      break;
                  case VTSS_SERDES_MODE_100FX:
                      ob_lev = 48;
                      ob_ena_cas = 1;
                      ib_rf = 15;
                      ctrl_data = 60;
                      qrate = 1;
                      hrate = 0;
                      if_100fx = 1;
                      break;
                  case VTSS_SERDES_MODE_1000BaseX:
                      ob_lev = 48;
                      ob_ena_cas = 2;
                      ib_rf = 15;
                      ctrl_data = 60;
                      qrate = 1;
                      hrate = 0;
                      break;
                  case VTSS_SERDES_MODE_DISABLE:
                      ob_lev = 0;
                      ob_ena_cas = 0;
                      ib_rf = 0;
                      ib_vbcom = 0;
                      ena_rot = 0;
                      ctrl_data = 0;
                      qrate = 0;
                      hrate = 0;
                      break;
                  default:
              #if defined(H2_SD6G_DEBUG_ENABLE)
                      println_str("%% Serdes6g mode %s not supported", l26_serdes_mode_txt(mode));
              #endif /* H2_SD6G_DEBUG_ENABLE */
                      return;
                  }
                  /* RCOMP_CFG0.MODE_SEL = 2 */
                  VTSS_RC(l26_wr(RCOMP_CFG0,0x3<<8));
              
                  /* RCOMP_CFG0.RUN_CAL = 1 */
                  VTSS_RC(l26_wr(RCOMP_CFG0, 0x3<<8|1<<12));
              
                  do { /* Wait for calibration to finish */
                      L26_RD(VTSS_MACRO_CTRL_RCOMP_STATUS_RCOMP_STATUS, &rcomp_val);
                  } while(rcomp_val & VTSS_F_MACRO_CTRL_RCOMP_STATUS_RCOMP_STATUS_BUSY);
              
                  L26_RD(VTSS_MACRO_CTRL_RCOMP_STATUS_RCOMP_STATUS, &rcomp_val);
                  rcomp_val = VTSS_X_MACRO_CTRL_RCOMP_STATUS_RCOMP_STATUS_RCOMP(rcomp_val);
              
                  /* 1. Configure macro, apply reset */
                  /* OB_CFG  */
                  L26_WRM(VTSS_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_OB_CFG,
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_OB_CFG_OB_POL |
                          VTSS_ENCODE_BITFIELD(rcomp_val+1,4,4) | /* RCOMP: bit 4-7 */
                          VTSS_ENCODE_BITFIELD(ob_sr,0,4) |       /* SR:    bit 0-3 */
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_OB_CFG_OB_POST0(ob_post_0) |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_OB_CFG_OB_SR_H |
                          (ob_ena1v ? VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_OB_CFG_OB_ENA1V_MODE : 0),
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_OB_CFG_OB_POL |
                          VTSS_ENCODE_BITMASK(4,4) | /* RCOMP: bit 4-7 */
                          VTSS_ENCODE_BITMASK(0,4) | /* SR:    bit 0-3 */
                          VTSS_M_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_OB_CFG_OB_POST0 |
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 6   

                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_OB_CFG_OB_SR_H |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_OB_CFG_OB_ENA1V_MODE);
              
                  /* OB_CFG1 */
                  L26_WRM(VTSS_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_OB_CFG1,
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_OB_CFG1_OB_ENA_CAS(ob_ena_cas) |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_OB_CFG1_OB_LEV(ob_lev),
                          VTSS_M_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_OB_CFG1_OB_ENA_CAS |
                          VTSS_M_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_OB_CFG1_OB_LEV);
              
                   /* IB_CFG */
                  L26_WRM(VTSS_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG,
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_IC_AC(ib_ic_ac) |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_RT(15) |
                          VTSS_ENCODE_BITFIELD(ib_vbac,7,3) |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_RESISTOR_CTRL(rcomp_val+2) |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_VBCOM(ib_vbcom) |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_RF(ib_rf),
                          VTSS_M_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_IC_AC |
                          VTSS_M_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_RT |
                          VTSS_ENCODE_BITMASK(7,3) |
                          VTSS_M_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_RESISTOR_CTRL |
                          VTSS_M_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_VBCOM |
                          VTSS_M_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_RF);
              
                  /* IB_CFG1 */
                  L26_WRM(VTSS_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1,
                          (ib_cterm_ena ? VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_CTERM_ENA : 0) |
                          (ib_chf ? VTSS_BIT(7) : 0 ) |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_C(ib_c) |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_DIS_EQ |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_ENA_OFFSAC |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_ENA_OFFSDC |
                          (if_100fx ? VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FX100_ENA : 0) |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_RST,
                          VTSS_BIT(7) |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_CTERM_ENA |
                          VTSS_M_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_C |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_DIS_EQ |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_ENA_OFFSAC |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_ENA_OFFSDC |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FX100_ENA |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_RST);
              
                  /* DES_CFG */
                  L26_WRM(VTSS_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_DES_CFG,
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_PHS_CTRL(6) |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_MBTR_CTRL(2) |
                         (if_100fx ? VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_CPMD_SEL(2) : 0) |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_BW_HYST(5) |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_BW_ANA(5),
                          VTSS_M_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_PHS_CTRL |
                          VTSS_M_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_MBTR_CTRL |
                          VTSS_M_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_CPMD_SEL |
                          VTSS_M_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_BW_HYST |
                          VTSS_M_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_BW_ANA);
              
                  /* PLL_CFG */
                  L26_WRM(VTSS_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG,
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_FSM_CTRL_DATA(ctrl_data) |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_FSM_ENA |
                          (ena_rot ? VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_ENA_ROT : 0),
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 7   

                          VTSS_M_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_FSM_CTRL_DATA |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_FSM_ENA |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_ENA_ROT);
              
                  /* Write masked to avoid changing RECO_SEL_* fields used by SyncE */
                  /* COMMON_CFG */
                  L26_WRM(VTSS_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG,
                          (ena_lane ? VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_ENA_LANE : 0) |
                          (hrate ? VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_HRATE : 0) |
                          (qrate ? VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_QRATE : 0) |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_IF_MODE(if_mode),
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_SYS_RST |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_ENA_LANE |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_HRATE |
                          VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_QRATE |
                          VTSS_M_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_IF_MODE);
              
              
                  /* MISC_CFG */
                  L26_WRM(VTSS_MACRO_CTRL_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG,
                          (if_100fx ? VTSS_F_MACRO_CTRL_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_DES_100FX_CPMD_ENA : 0),
                          VTSS_F_MACRO_CTRL_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_DES_100FX_CPMD_ENA);
              
                  L26_WRM(VTSS_MACRO_CTRL_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG,
                          (if_100fx ? VTSS_F_MACRO_CTRL_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_DES_100FX_CPMD_ENA : 0) |
                          VTSS_F_MACRO_CTRL_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_LANE_RST,
                          VTSS_F_MACRO_CTRL_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_DES_100FX_CPMD_ENA |
                          VTSS_F_MACRO_CTRL_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_LANE_RST);
              
                  VTSS_RC(l26_sd6g_write(addr, L26_SERDES_WAIT));
              
                  /* 2. Release PLL reset */
                  L26_WRM_SET(VTSS_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG,
                              VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_SYS_RST);
                  VTSS_RC(l26_sd6g_write(addr, L26_SERDES_WAIT));
              
                  /* 3. Release digital reset */
                  L26_WRM_CLR(VTSS_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1,
                              VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_RST);
              
                  L26_WRM(VTSS_MACRO_CTRL_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG, 0,
                          VTSS_F_MACRO_CTRL_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_LANE_RST);
                  VTSS_RC(l26_sd6g_write(addr, 0));
              }
              
              #elif defined(VTSS_ARCH_OCELOT)
 407          {
 408   1          u32 ob_ena1v_mode = 0;
 409   1          u32 ob_post0 = 0;
 410   1          u32 ob_prec = 0;
 411   1          u32 ob_ena_cas = 0;
 412   1          u32 ob_lev = 24;
 413   1          u32 ob_idle = 0;
 414   1          u32 des_phs_ctrl = 2; // BZ#21826
 415   1          u32 des_cpmd_sel = 0;
 416   1          u32 des_bw_ana = 3; // as per BZ 17124
 417   1          u32 ib_sig_det_clk_sel = 7;
 418   1          u32 ser_alisel = 0;
 419   1          u32 ser_enali = 0;
 420   1          u32 pll_div4 = 0;
 421   1          u32 pll_ena_rot = 0;
 422   1          u32 pll_fsm_ctrl_data = 120;
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 8   

 423   1          u32 pll_rot_dir = 0;
 424   1          u32 pll_rot_frq = 0;
 425   1          u32 hrate = 0;
 426   1          u32 qrate = 0;
 427   1          u32 if_mode = 3;
 428   1          u32 des_100fx_cpmd_ena = 0;
 429   1          u32 rx_lpi_mode_ena = 0;
 430   1          u32 tx_lpi_mode_ena = 0;
 431   1          u32 ib_concur = 1;
 432   1          u32 ena_lane = 1;
 433   1          u32 ib_sig_det_ena = 1;
 434   1          u32 ib_reg_ena = 1;
 435   1          u32 ib_sam_ena = 1;
 436   1          u32 ib_eqz_ena = 1;
 437   1          u32 ib_urge = 4;
 438   1          u32 test_mode = 0;
 439   1          u32 test_pattern = 0;
 440   1          u32 ib_filt_hp = 1, ib_filt_mid = 1, ib_filt_lp = 1, ib_filt_offset = 1;
 441   1          u32 ib_frc_hp = 0, ib_frc_mid = 0, ib_frc_lp = 0, ib_frc_offset = 0;
 442   1          u32 ib_ini_hp = 0, ib_ini_mid = 31, ib_ini_lp = 1, ib_ini_offset = 31;
 443   1      
 444   1          switch (mode) {
 445   2          case VTSS_SERDES_MODE_PCIE:
 446   2              ob_ena1v_mode = 0;
 447   2              ob_post0 = 0;
 448   2              ob_ena_cas = 0;
 449   2              ob_lev = 63;
 450   2              ser_alisel = 0;
 451   2              ser_enali = 0;
 452   2              pll_ena_rot = 0;
 453   2              pll_fsm_ctrl_data = 60;
 454   2              pll_rot_frq = 0;
 455   2              hrate = 1;
 456   2              qrate = 0;
 457   2              if_mode = 1;
 458   2              des_100fx_cpmd_ena = 0;
 459   2              des_bw_ana = 3;
 460   2              rx_lpi_mode_ena = 1;
 461   2              tx_lpi_mode_ena = 1;
 462   2              des_phs_ctrl = 3;  // BZ#21826
 463   2              break;
 464   2          case VTSS_SERDES_MODE_2G5:
 465   2              ob_ena1v_mode = 0;
 466   2              ob_post0 = 0;
 467   2              ob_ena_cas = 0;
 468   2              ob_lev = 63;
 469   2              ser_alisel = 0;
 470   2              ser_enali = 0;
 471   2              pll_ena_rot = 1;
 472   2              pll_fsm_ctrl_data = 48;
 473   2              pll_rot_frq = 1;
 474   2              hrate = 1;
 475   2              qrate = 0;
 476   2              if_mode = 1;
 477   2              des_100fx_cpmd_ena = 0;
 478   2              des_bw_ana = 4; // as per BZ 17124
 479   2              break;
 480   2          case VTSS_SERDES_MODE_QSGMII:
 481   2              ob_ena1v_mode = 0;
 482   2              ob_post0 = 0;
 483   2              ob_ena_cas = 0;
 484   2              ob_lev = 24;
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 9   

 485   2              ser_alisel = 0;
 486   2              ser_enali = 0;
 487   2              pll_ena_rot = 0;
 488   2              pll_fsm_ctrl_data = 120;
 489   2              pll_rot_frq = 0;
 490   2              hrate = 0;
 491   2              qrate = 0;
 492   2              if_mode = 3;
 493   2              des_100fx_cpmd_ena = 0;
 494   2              des_bw_ana = 5; // as per BZ 17124
 495   2              break;
 496   2          case VTSS_SERDES_MODE_SGMII:
 497   2              ob_ena1v_mode = 1;
 498   2              ob_post0 = 0;
 499   2              ob_ena_cas = 2;
 500   2              ob_lev = 48;
 501   2              ser_alisel = 0;
 502   2              ser_enali = 0;
 503   2              pll_ena_rot = 0;
 504   2              pll_fsm_ctrl_data = 60;
 505   2              pll_rot_frq = 0;
 506   2              hrate = 0;
 507   2              qrate = 1;
 508   2              if_mode = 1;
 509   2              des_100fx_cpmd_ena = 0;
 510   2              break;
 511   2          case VTSS_SERDES_MODE_100FX:
 512   2              ob_ena1v_mode = 1;
 513   2              ob_post0 = 1;
 514   2              ob_ena_cas = 0;
 515   2              ob_lev = 48;
 516   2              ser_alisel = 0;
 517   2              ser_enali = 0;
 518   2              pll_ena_rot = 0;
 519   2              pll_fsm_ctrl_data = 60;
 520   2              pll_rot_frq = 0;
 521   2              hrate = 0;
 522   2              qrate = 1;
 523   2              if_mode = 1;
 524   2              des_100fx_cpmd_ena = 1;
 525   2      
 526   2              /* BZ#21826 - Observe the CRC frames while receiving frame content is all Zeros/Ones with 1518 byt
             -es frame length
 527   2               *            when 100Base SFP modules is plugged.
 528   2               *
 529   2               * Observation:
 530   2               * Some bits(for example, PCS_ERROR_STICKY and SYNC_LOST_STICK) are raised in register
 531   2               * DEV:PCS_FX100_STATUS:PCS_FX100_STATUS. These error bits will occur the link-down
 532   2               * event in h2_pcs1g_100fx_status_get().
 533   2               *
 534   2               * Background:
 535   2               * SFP rate selector pin is an input to the SFP plug, controlled by the host.
 536   2               * On PCB121, SFP1_RATESEL is controlled by Ferret GPIO18 and SFP2_RATESEL is
 537   2               * controlled by Ferret GPIO19.
 538   2               * These Ferret GPIO pins are also used for strapping VCORE_CFG mode during
 539   2               * reset, so has a weak pulldown (4K7, SFP1_RATESEL) and a weak pullup
 540   2               * (4K7, SFP2_RATESEL) respectively, on PCB121 - at least until a PCIe module
 541   2               * connected to the NPI/PCIe connector overrules this (the NPI module leaves the signals as-is).
 542   2               * The SFP MSA states that if RATESEL is used by a plug, then the plug must
 543   2               * have an internal pulldown (>30K) on the signal.  If the signal is low then
 544   2               * the plug must operate at reduced bandwidth, if the signal is high then the
 545   2               * plug must operate at full bandwidth.
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 10  

 546   2               * Hence if you do not deliberately control GPIO18 and GPIO19, then SFP1_RATESEL
 547   2               * will most likely be low (due to the PCB121 pulldown on the signal) and a
 548   2               * RATESEL-aware SFP plug in the SFP1 slot will thus operate at reduced bandwidth,
 549   2               * while SFP2_RATESEL will most likely be high (due to the PCB121 pullup on the signal)
 550   2               * and a RATESEL-aware SFP plug in the SFP2 slot will thus operate at full bandwidth.
 551   2               *
 552   2               * In FX100-mode cp/md are coming from the core logic, so bit3 in register 'DES_PHS_CTRL:bit-16'
 553   2               * must be set. If it is not set, the CDR is controlled from the core-logic but the
 554   2               * integrator gets its information from the DES directly, so both fight against each other.
 555   2               * And the input equalizer regulation(IB_REG_ENA) doesn't need for EQ in 100Mbit mode.
 556   2               * And bit2 in register 'DES_PHS_CTRL:bit-15' must set to 0.
 557   2               *   - 1: Integrative part of CDR loop is enabled if PCS logic is in sync
 558   2               *   - 0: Integrative part of CDR loop is always enabled.
 559   2               * Because the feedback from the PCS to the SerDes is not connected in Ferret.
 560   2               * The same setting need to apply for all the 1G-Serdes and 6G-Serdes interfaces.
 561   2               *
 562   2               * Theory:
 563   2               * The AC coupling caps inside the SFP module has a too small value, so that
 564   2               * the long frames introduce baseline wander on the serdes lanes (creates a DC offset).
 565   2               * This can cause the RX macro to loose track and lock.
 566   2               *
 567   2               * Solution: (Suit to Ferret/Ocelot/Serval-T/JR2)
 568   2               * Add the following new setting (based on the original configuration).
 569   2               * 1 .Drive SFP ports rate select (GPIO 18/19) to high
 570   2               * 2. 1G-Serdes:
 571   2               *      -- Change the default value from 1g_des_phs_ctrl=6 to 1g_des_phs_ctrl=2        
 572   2               *      -- For FX100_Mode: 
 573   2               *          . SERDES6G_ANA_CFG:SERDES1G_DES_CFG.DES_PHS_CTRL (16-13) = 10
 574   2               *          . SERDES1G_ANA_CFG:SERDES1G_IB_CFG.IB_ENA_CMV_TERM(13) = 0
 575   2               * 3. 6G-Serdes:
 576   2               *      -- Change the default value from 6g_des_phs_ctrl=6 to 6g_des_phs_ctrl=2
 577   2               *      -- For FX100_Mode:
 578   2               *          . SERDES6G_ANA_CFG:SERDES6G_DES_CFG.DES_PHS_CTRL (16-13) = 10
 579   2               *          . SERDES6G_ANA_CFG:SERDES6G_IB_CFG2.IB_UREG = 4 (default)
 580   2               *          . SERDES6G_ANA_CFG:SERDES6G_IB_CFG.IB_EQZ_ENA (1) = 0
 581   2               *          . SERDES6G_ANA_CFG:SERDES6G_IB_CFG.IB_REG_ENA (0) = 0
 582   2               *          . SERDES6G_ANA_CFG:SERDES6G_IB_CFG1.IB_FRC_<HP,MID,LP,OFFSET> = 1
 583   2               *          . SERDES6G_ANA_CFG:SERDES6G_IB_CFG1.IB_FILT_<HP,MID,LP,OFFSET> = 0
 584   2               *          . SERDES6G_ANA_CFG:SERDES6G_IB_CFG3.IB_INI_<HP,MID,LP,OFFSET> = <0,31,63,31>
 585   2               */
 586   2              des_cpmd_sel = 2;
 587   2              des_phs_ctrl = 10;
 588   2              ib_reg_ena = 0;
 589   2              ib_eqz_ena = 0;
 590   2      
 591   2              ib_frc_hp = 1;
 592   2              ib_frc_mid = 1;
 593   2              ib_frc_lp = 1;
 594   2              ib_frc_offset = 1;
 595   2      
 596   2              ib_filt_hp = 0;
 597   2              ib_filt_mid = 0;
 598   2              ib_filt_lp = 0;
 599   2              ib_filt_offset = 0;
 600   2      
 601   2              ib_ini_hp = 0;
 602   2              ib_ini_mid = 31;
 603   2              ib_ini_lp = 63;
 604   2              ib_ini_offset = 31;
 605   2              break;
 606   2          case VTSS_SERDES_MODE_1000BaseX:
 607   2              ob_ena1v_mode = 0;
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 11  

 608   2              ob_post0 = 1;
 609   2              ob_ena_cas = 2;
 610   2              ob_lev = 48;
 611   2              ser_alisel = 0;
 612   2              ser_enali = 0;
 613   2              pll_ena_rot = 0;
 614   2              pll_fsm_ctrl_data = 60;
 615   2              pll_rot_frq = 0;
 616   2              qrate = 1;
 617   2              if_mode = 1;
 618   2              des_100fx_cpmd_ena = 0;
 619   2              break;
 620   2          case VTSS_SERDES_MODE_XAUI:
 621   2              ob_ena1v_mode = 0;
 622   2              ob_post0 = 0;
 623   2              ob_ena_cas = 0;
 624   2              ob_lev = 63;
 625   2              ser_alisel = 1;
 626   2              ser_enali = 1;
 627   2              pll_ena_rot = 1;
 628   2              pll_fsm_ctrl_data = 48;
 629   2              pll_rot_frq = 1;
 630   2              hrate = 1;
 631   2              qrate = 0;
 632   2              if_mode = 1;
 633   2              des_100fx_cpmd_ena = 0;
 634   2              break;
 635   2          case VTSS_SERDES_MODE_IDLE:
 636   2              ob_idle = 1;
 637   2              break;
 638   2          case VTSS_SERDES_MODE_TEST_MODE:
 639   2              test_mode = 2; // Fixed pattern
 640   2              test_pattern = 0x5f289;
 641   2              break;
 642   2          case VTSS_SERDES_MODE_DISABLE:
 643   2              ib_concur = 0;
 644   2              ena_lane = 0;
 645   2              ib_sig_det_ena = 0;
 646   2              ib_reg_ena = 0;
 647   2              ib_sam_ena = 0;
 648   2              ib_eqz_ena = 0;
 649   2              break;
 650   2          default:
 651   2      #ifndef NDEBUG
                      print_str("%% Calling h2_sd6g_cfg(): mode is unsupported, mode=0x");
                      print_hex_b(mode);
                      print_cr_lf();
              #endif
 656   2              return;
 657   2          }
 658   1      
 659   1          h2_sd6g_read(addr);
 660   1      
 661   1          // prepare for initial or new configuration
 662   1      
 663   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG,
 665   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG_OB_IDLE(ob_idle),
 665   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG_OB_IDLE);
 666   1      
 667   1          if (mode == VTSS_SERDES_MODE_IDLE) {
 668   2              /* Apply the idle mode (port down) and return */
 669   2              h2_sd6g_write(addr);
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 12  

 670   2              return;
 671   2          }
 672   1      
 673   1          // Set test mode and test pattern
 674   1          H2_WRITE(VTSS_HSIO_SERDES6G_DIG_CFG_SERDES6G_TP_CFG0, test_pattern);
 675   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_DIG_CFG_SERDES6G_DFT_CFG0,
 677   1                          VTSS_F_HSIO_SERDES6G_DIG_CFG_SERDES6G_DFT_CFG0_TEST_MODE(test_mode),
 677   1                          VTSS_M_HSIO_SERDES6G_DIG_CFG_SERDES6G_DFT_CFG0_TEST_MODE);
 678   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG,
 680   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_SYS_RST(0),
 680   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_SYS_RST);
 681   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG,
 683   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_FSM_ENA(0),
 683   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_FSM_ENA);
 684   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG,
 696   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_SIG_DET_ENA(ib_sig_det_ena) |
 696   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_REG_ENA(ib_reg_ena) |
 696   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_SAM_ENA(ib_sam_ena) |
 696   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_EQZ_ENA(ib_eqz_ena) |
 696   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_CONCUR(ib_concur) |
 696   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_CAL_ENA(0),
 696   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_SIG_DET_ENA |
 696   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_REG_ENA |
 696   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_SAM_ENA |
 696   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_EQZ_ENA |
 696   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_CONCUR |
 696   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_CAL_ENA);
 697   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG,
 699   1                          VTSS_F_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_LANE_RST(1),
 699   1                          VTSS_M_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_LANE_RST);
 700   1          h2_sd6g_write(addr);
 701   1      
 702   1          // apply configuration
 703   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG,
 705   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG_OB_ENA1V_MODE(ob_ena1v_mode),
 705   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG_OB_ENA1V_MODE);
 706   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG,
 708   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG_OB_POST0(ob_post0),
 708   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG_OB_POST0);
 709   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG,
 711   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG_OB_PREC(ob_prec),
 711   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG_OB_PREC);
 712   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG1,
 714   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG1_OB_ENA_CAS(ob_ena_cas),
 714   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG1_OB_ENA_CAS);
 715   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG1,
 717   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG1_OB_LEV(ob_lev),
 717   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_OB_CFG1_OB_LEV);
 718   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_DES_CFG,
 720   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_PHS_CTRL(des_phs_ctrl),
 720   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_PHS_CTRL);
 721   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_DES_CFG,
 723   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_CPMD_SEL(des_cpmd_sel),
 723   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_CPMD_SEL);
 724   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_DES_CFG,
 726   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_BW_ANA(des_bw_ana),
 726   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_BW_ANA);
 727   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG,
 729   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_SIG_DET_CLK_SEL(0),
 729   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_SIG_DET_CLK_SEL);
 730   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG,
 732   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_REG_PAT_SEL_OFFSET(0),
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 13  

 732   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_REG_PAT_SEL_OFFSET);
 733   1      
 734   1      #if 1 // BZ#21826
 735   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1,
 743   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FRC_HP(ib_frc_hp) |
 743   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FRC_MID(ib_frc_mid) |
 743   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FRC_LP(ib_frc_lp) |
 743   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FRC_OFFSET(ib_frc_offset),
 743   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FRC_HP |
 743   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FRC_MID |
 743   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FRC_LP |
 743   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FRC_OFFSET);
 744   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1,
 752   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FILT_HP(ib_filt_hp) |
 752   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FILT_MID(ib_filt_mid) |
 752   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FILT_LP(ib_filt_lp) |
 752   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FILT_OFFSET(ib_filt_offset),
 752   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FILT_HP |
 752   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FILT_MID |
 752   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FILT_LP |
 752   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FILT_OFFSET);
 753   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG2,
 755   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG2_IB_UREG(ib_urge),
 755   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG2_IB_UREG);
 756   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG3,
 764   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG3_IB_INI_HP(ib_ini_hp) |
 764   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG3_IB_INI_MID(ib_ini_mid) |
 764   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG3_IB_INI_LP(ib_ini_lp) |
 764   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG3_IB_INI_OFFSET(ib_ini_offset),
 764   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG3_IB_INI_HP |
 764   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG3_IB_INI_MID |
 764   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG3_IB_INI_LP |
 764   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG3_IB_INI_OFFSET);
 765   1      #endif
 766   1      
 767   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1,
 769   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_TSDET(16),
 769   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_TSDET);
 770   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_SER_CFG,
 772   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_SER_CFG_SER_ALISEL(ser_alisel),
 772   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_SER_CFG_SER_ALISEL);
 773   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_SER_CFG,
 775   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_SER_CFG_SER_ENALI(ser_enali),
 775   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_SER_CFG_SER_ENALI);
 776   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG,
 778   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_DIV4(pll_div4),
 778   1                           VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_DIV4);
 779   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG,
 781   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_ENA_ROT(pll_ena_rot),
 781   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_ENA_ROT);
 782   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG,
 784   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_FSM_CTRL_DATA(pll_fsm_ctrl_data),
 784   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_FSM_CTRL_DATA);
 785   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG,
 787   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_ROT_DIR(pll_rot_dir),
 787   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_ROT_DIR);
 788   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG,
 790   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_ROT_FRQ(pll_rot_frq),
 790   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_ROT_FRQ);
 791   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG,
 793   1                          VTSS_F_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_LANE_RST(1),
 793   1                          VTSS_M_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_LANE_RST);
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 14  

 794   1      
 795   1      #if 1 // Peter, 2016/07/18
 796   1          /* Configure Serdes6g TX/RX path to normal mode since the default is power down mode */
 797   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG,
 801   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_PWD_TX(0) |
 801   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_PWD_RX(0),
 801   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_PWD_TX |
 801   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_PWD_RX);
 802   1      #endif
 803   1      
 804   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG,
 806   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_SYS_RST(1),
 806   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_SYS_RST);
 807   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG,
 809   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_ENA_LANE(ena_lane),
 809   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_ENA_LANE);
 810   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG,
 812   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_HRATE(hrate),
 812   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_HRATE);
 813   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG,
 815   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_QRATE(qrate),
 815   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_QRATE);
 816   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG,
 818   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_IF_MODE(if_mode),
 818   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_COMMON_CFG_IF_MODE);
 819   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG,
 821   1                          VTSS_F_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_DES_100FX_CPMD_ENA(des_100fx_cpmd_ena),
 821   1                          VTSS_M_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_DES_100FX_CPMD_ENA);
 822   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG,
 824   1                          VTSS_F_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_RX_LPI_MODE_ENA(rx_lpi_mode_ena),
 824   1                          VTSS_M_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_RX_LPI_MODE_ENA);
 825   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG,
 827   1                          VTSS_F_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_TX_LPI_MODE_ENA(tx_lpi_mode_ena),
 827   1                          VTSS_M_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_TX_LPI_MODE_ENA);
 828   1          h2_sd6g_write(addr);
 829   1      
 830   1          // Step 2: Set pll_fsm_ena=1
 831   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG,
 833   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_FSM_ENA(1),
 833   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_PLL_CFG_PLL_FSM_ENA);
 834   1          h2_sd6g_write(addr);
 835   1      
 836   1          // Step 3: Wait for 20 ms for PLL bringup
 837   1          delay_1(20);
 838   1      
 839   1          // Step 4: Start IB calibration by setting ib_cal_ena and clearing lane_rst
 840   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG,
 842   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_CAL_ENA(1),
 842   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_CAL_ENA);
 843   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG,
 845   1                          VTSS_F_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_LANE_RST(0),
 845   1                          VTSS_M_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_LANE_RST);
 846   1          h2_sd6g_write(addr);
 847   1      
 848   1          // Step 5: Wait for 60 ms for calibration
 849   1          delay_1(60);
 850   1      
 851   1          // Step 6:Set ib_tsdet and ib_reg_pat_sel_offset back to correct values
 852   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG,
 854   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_REG_PAT_SEL_OFFSET(0),
 854   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_REG_PAT_SEL_OFFSET);
 855   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG,
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 15  

 857   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_SIG_DET_CLK_SEL(ib_sig_det_clk_sel),
 857   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG_IB_SIG_DET_CLK_SEL);
 858   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1,
 860   1                          VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_TSDET(3),
 860   1                          VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_TSDET);
 861   1          h2_sd6g_write(addr);
 862   1      }
 863          #endif
 864          
 865          /**
 866           * Configures the Serdes1G/Serdes6G blocks based on mux mode
 867           * and Target.
 868           */
 869          void h2_serdes_macro_config (void)
 870          {
 871   1          /* Mux ports together with serdes macros */
 872   1          /*  00 - mode 0 - 3*QSGMII, 1*2G5, 1*SGMII */
 873   1          /*  01 - mode 1 - 2*2G5, 10*SGMII          */
 874   1          /*  10 - mode 2 - 2*QSGMII, 8*SGMII        */
 875   1      
 876   1      #if defined(LUTON26_L25)
                  H2_WRITE_MASKED(VTSS_DEVCPU_GCB_MISC_MISC_CFG,
                                  VTSS_F_DEVCPU_GCB_MISC_MISC_CFG_SW_MODE(0UL),
                                  VTSS_M_DEVCPU_GCB_MISC_MISC_CFG_SW_MODE);
                  h2_sd6g_cfg(VTSS_SERDES_MODE_QSGMII, 0xE);  /* Enable QSGMII, Serdes6g (3-1) */
                  h2_sd6g_cfg(VTSS_SERDES_MODE_SGMII, 0x1);   /* Enable SGMII, Serdes6g (0) */
              
              #elif defined(LUTON26_L16)
              #ifdef LUTON26_L16_QSGMII_EXT_PHY
                  H2_WRITE_MASKED(VTSS_DEVCPU_GCB_MISC_MISC_CFG,
                                  VTSS_F_DEVCPU_GCB_MISC_MISC_CFG_SW_MODE(0UL),
                                  VTSS_M_DEVCPU_GCB_MISC_MISC_CFG_SW_MODE);
                  h2_sd6g_cfg(VTSS_SERDES_MODE_QSGMII, 0xF);  /* Enable QSGMII, Serdes6g (3-0) */
              #else
                  H2_WRITE_MASKED(VTSS_DEVCPU_GCB_MISC_MISC_CFG,
                                  VTSS_F_DEVCPU_GCB_MISC_MISC_CFG_SW_MODE(1UL),
                                  VTSS_M_DEVCPU_GCB_MISC_MISC_CFG_SW_MODE);
                  h2_sd6g_cfg(VTSS_SERDES_MODE_SGMII, 0xF);   /* Enable SGMII, Serdes6g (3-0) */
              #endif /* LUTON26_L16_QSGMII_EXT_PHY */
              
              #elif defined(LUTON26_L10)
                  H2_WRITE_MASKED(VTSS_DEVCPU_GCB_MISC_MISC_CFG,
                                  VTSS_F_DEVCPU_GCB_MISC_MISC_CFG_SW_MODE(1UL),
                                  VTSS_M_DEVCPU_GCB_MISC_MISC_CFG_SW_MODE);
                  h2_sd6g_cfg(VTSS_SERDES_MODE_SGMII, 0x3);   /* Enable SGMII, Serdes1g (1-0) */
              
              #elif defined(VTSS_ARCH_OCELOT)
 903   1      #if defined(FERRET_F11)
                  h2_sd6g_cfg(VTSS_SERDES_MODE_QSGMII, 0x1);  /* DEV[4-7] - Configure SerDes6G_0 for QSGMII (mask 0x1) *
             -/
                  h2_sd1g_cfg(VTSS_SERDES_MODE_SGMII, 0x10);  /* DEV[9]   - Configure interface macro: SerDes1G_4 for SG
             -MII (mask 0x10) */
                  h2_sd6g_cfg(VTSS_SERDES_MODE_2G5, 0x6);     /* DEV[8,10] - Configure SerDes6G_1 and SerDes6G_2 for 2G5
             - SGMII (mask 0x6) */
              #endif // FERRET_F11
 908   1      
 909   1      #if defined(FERRET_F10P)
                  h2_sd6g_cfg(VTSS_SERDES_MODE_QSGMII, 0x1);  /* DEV[4-7] - Configure SerDes6G_0 for QSGMII (mask 0x1) *
             -/
                  h2_sd6g_cfg(VTSS_SERDES_MODE_PCIE, 0x4);    /* DEV[10]  - Configure SerDes6G_2 for PCIe (mask 0x4) */
                  h2_sd6g_cfg(VTSS_SERDES_MODE_2G5,  0x2);  /* DEV[8] - Configure SerDes6G_1 for 2G5 SGMII (mask 0x2) */
                  h2_sd1g_cfg(VTSS_SERDES_MODE_SGMII, 0x10);  /* DEV[9]   - Configure interface macro: SerDes1G_4 for SG
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 16  

             -MII (mask 0x10) */
              #endif // FERRET_F10P
 915   1      
 916   1      #if defined(FERRET_F5)
 917   1          h2_sd6g_cfg(VTSS_SERDES_MODE_2G5, 0x4);     /* DEV[10] - Configure SerDes6G_2 for 2G5 SGMII (mask 0x4)
             - */
 918   1          h2_sd1g_cfg(VTSS_SERDES_MODE_SGMII, 0x10);  /* CUSTOM: DEV[9?]  - Configure interface macro: SerDes1G_
             -4 for SGMII (mask 0x10) */ 
 919   1      #endif // FERRET_F5
 920   1      
 921   1      #if defined(FERRET_F4P)
                  h2_sd6g_cfg(VTSS_SERDES_MODE_PCIE, 0x4);    /* DEV[10]  - Configure SerDes6G_2 for PCIe (mask 0x4) */
              #endif // FERRET_F4P
 924   1      
 925   1      #endif
 926   1      }
 927          
 928          #if defined(VTSS_ARCH_LUTON26)
              /* ************************************************************************ */
              static void _h2_sd6g_cfg_100fx(ulong addr, vtss_cport_no_t chip_port)
              /* ------------------------------------------------------------------------ --
               * Purpose     : Configures the sd6g 100fx mode
               * Remarks     :
               * Restrictions:
               * See also    :
               * Example     :
               ****************************************************************************/
              {
                  h2_sd6g_read(addr);
              
              #if defined(VTSS_ARCH_LUTON26)
                  H2_WRITE_MASKED(VTSS_MACRO_CTRL_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG,
                                  VTSS_F_MACRO_CTRL_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_DES_100FX_CPMD_ENA,
                                  VTSS_F_MACRO_CTRL_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_DES_100FX_CPMD_ENA);
              
                  H2_WRITE_MASKED(VTSS_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1,
                                  VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FX100_ENA,
                                  VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_IB_CFG1_IB_FX100_ENA);
              
                  H2_WRITE_MASKED(VTSS_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_DES_CFG,
                                  VTSS_F_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_CPMD_SEL(2UL),
                                  VTSS_M_MACRO_CTRL_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_CPMD_SEL);
              
              #elif defined(VTSS_ARCH_OCELOT)
                  H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG,
                                  VTSS_F_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_DES_100FX_CPMD_ENA(1),
                                  VTSS_M_HSIO_SERDES6G_DIG_CFG_SERDES6G_MISC_CFG_DES_100FX_CPMD_ENA);
              
                  H2_WRITE_MASKED(VTSS_HSIO_SERDES6G_ANA_CFG_SERDES6G_DES_CFG,
                                  VTSS_F_HSIO_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_CPMD_SEL(2UL),
                                  VTSS_M_HSIO_SERDES6G_ANA_CFG_SERDES6G_DES_CFG_DES_CPMD_SEL);
              #endif
              
                  h2_sd6g_write(addr);
              }
              #endif
 967          
 968          /**
 969           * Serdes6G setup (Disable/2G5/QSGMII/SGMII).
 970           */
 971          void h2_sd6g_cfg_change(vtss_serdes_mode_t mode, ulong addr)
 972          {
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 17  

 973   1      #if defined(VTSS_ARCH_LUTON26)
                  h2_sd6g_read(addr);
                  delay_1(MSEC_20);
                  h2_sd6g_cfg(mode, addr);
                  h2_sd6g_write(addr);
                  delay_1(10); // Wait until LCPLL stable again
              
                  if (mode == VTSS_SERDES_MODE_100FX) {
                      _h2_sd6g_cfg_100fx(addr);
                  }
              
              #elif defined(VTSS_ARCH_OCELOT)
 985   1          h2_sd6g_cfg(mode, addr);
 986   1      #endif // VTSS_ARCH_LUTON26
 987   1      }
 988          
 989          #if defined(VTSS_ARCH_OCELOT)
 990          #if defined(FERRET_F11) || defined(FERRET_F10P) || defined(FERRET_F5)
 991          void h2_sd1g_write(ulong addr)
 992          {
 993   1          ulong dat;
 994   1      
 995   1          // EA = 0; // Disable interrupt while writing the date via serial Macro Configuration Bus (MCB)
 996   1          H2_WRITE(VTSS_HSIO_MCB_SERDES1G_CFG_MCB_SERDES1G_ADDR_CFG,
 998   1                   VTSS_F_HSIO_MCB_SERDES1G_CFG_MCB_SERDES1G_ADDR_CFG_SERDES1G_ADDR(addr) |
 998   1                   VTSS_F_HSIO_MCB_SERDES1G_CFG_MCB_SERDES1G_ADDR_CFG_SERDES1G_WR_ONE_SHOT(1));
 999   1      
1000   1          /* Wait until write operation is completed  */
1001   1          do {
1002   2              H2_READ(VTSS_HSIO_MCB_SERDES1G_CFG_MCB_SERDES1G_ADDR_CFG, dat);
1003   2          } while(VTSS_X_HSIO_MCB_SERDES1G_CFG_MCB_SERDES1G_ADDR_CFG_SERDES1G_WR_ONE_SHOT(dat));
1004   1          // EA = 1; // Enable interrupt
1005   1      }
1006          
1007          void h2_sd1g_read(ulong addr)
1008          {
1009   1          ulong dat;
1010   1      
1011   1          // EA = 0; // Disable interrupt while reading the date via serial Macro Configuration Bus (MCB)
1012   1          H2_WRITE(VTSS_HSIO_MCB_SERDES1G_CFG_MCB_SERDES1G_ADDR_CFG,
1014   1                   VTSS_F_HSIO_MCB_SERDES1G_CFG_MCB_SERDES1G_ADDR_CFG_SERDES1G_ADDR(addr) |
1014   1                   VTSS_F_HSIO_MCB_SERDES1G_CFG_MCB_SERDES1G_ADDR_CFG_SERDES1G_RD_ONE_SHOT(1));
1015   1      
1016   1          /* Wait until write operation is completed  */
1017   1          do {
1018   2              H2_READ(VTSS_HSIO_MCB_SERDES1G_CFG_MCB_SERDES1G_ADDR_CFG, dat);
1019   2          } while(VTSS_X_HSIO_MCB_SERDES1G_CFG_MCB_SERDES1G_ADDR_CFG_SERDES1G_RD_ONE_SHOT(dat));
1020   1          // EA = 1; // Enable interrupt
1021   1      }
1022          #endif // FERRET_F11 || FERRET_F10P
1023          
1024          #if defined(FERRET_F11) || defined(FERRET_F10P) || defined(FERRET_F5)
1025          void h2_sd1g_cfg(vtss_serdes_mode_t mode, ulong addr)
1026          {
1027   1          /* The following code is based on the main trunk Serval implementation */
1028   1          BOOL ena_lane = 1, if_100fx = 0, ena_dc_coupling = 0, ob_idle = 0;
1029   1          u32  ob_amp_ctrl = 0, cpmd_sel=0, mbtr_ctrl=2, des_bw_ana=6, test_mode = 0, test_pattern = 0;
1030   1          u32 des_phs_ctrl = 2, ib_ena_cmv_term = 1; // BZ#21826
1031   1      
1032   1          switch (mode) {
1033   2          case VTSS_SERDES_MODE_SGMII:
1034   2              ob_amp_ctrl = 12;
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 18  

1035   2              break;
1036   2          case VTSS_SERDES_MODE_100FX:
1037   2              ob_amp_ctrl = 12;
1038   2              if_100fx = 1;
1039   2              cpmd_sel = 2;
1040   2              mbtr_ctrl = 3;
1041   2              ena_dc_coupling = 1;
1042   2              des_bw_ana = 0;
1043   2              des_phs_ctrl = 10;     // BZ#21826
1044   2              ib_ena_cmv_term = 0;   // BZ#21826
1045   2              break;
1046   2          case VTSS_SERDES_MODE_1000BaseX:
1047   2              ob_amp_ctrl = 15;
1048   2              break;
1049   2          case VTSS_SERDES_MODE_DISABLE:
1050   2              ena_lane = 0;
1051   2              ob_amp_ctrl = 0;
1052   2              break;
1053   2          case VTSS_SERDES_MODE_IDLE:
1054   2              ob_idle = 1;
1055   2              break;
1056   2          case VTSS_SERDES_MODE_TEST_MODE:
1057   2              test_mode = 2; // Fixed pattern
1058   2              test_pattern = 0x5f289;
1059   2              break;
1060   2          default:
1061   2      #ifndef NDEBUG
                      print_str("%% Calling h2_sd6g_cfg(): mode is unsupported, mode=0x");
                      print_hex_b(mode);
                      print_cr_lf();
              #endif
1066   2              return;
1067   2          }
1068   1      
1069   1          h2_sd1g_read(addr);
1070   1      
1071   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES1G_ANA_CFG_SERDES1G_SER_CFG,
1073   1                          VTSS_F_HSIO_SERDES1G_ANA_CFG_SERDES1G_SER_CFG_SER_IDLE(ob_idle),
1073   1                          VTSS_M_HSIO_SERDES1G_ANA_CFG_SERDES1G_SER_CFG_SER_IDLE);
1074   1      
1075   1          if (mode == VTSS_SERDES_MODE_IDLE) {
1076   2              /* Apply the idle mode (port down) and return */
1077   2              h2_sd1g_write(addr);
1078   2              return;
1079   2          }
1080   1      
1081   1          /* 1. Configure macro, apply reset */
1082   1          /* Set test mode and test pattern */
1083   1          H2_WRITE(VTSS_HSIO_SERDES1G_DIG_CFG_SERDES1G_TP_CFG, test_pattern);
1084   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES1G_DIG_CFG_SERDES1G_DFT_CFG0,
1086   1                          VTSS_F_HSIO_SERDES1G_DIG_CFG_SERDES1G_DFT_CFG0_TEST_MODE(test_mode),
1086   1                          VTSS_M_HSIO_SERDES1G_DIG_CFG_SERDES1G_DFT_CFG0_TEST_MODE);
1087   1      
1088   1          /* OB_CFG */
1089   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES1G_ANA_CFG_SERDES1G_OB_CFG,
1091   1                          VTSS_F_HSIO_SERDES1G_ANA_CFG_SERDES1G_OB_CFG_OB_AMP_CTRL(ob_amp_ctrl),
1091   1                          VTSS_M_HSIO_SERDES1G_ANA_CFG_SERDES1G_OB_CFG_OB_AMP_CTRL);
1092   1      
1093   1          /* IB_CFG */
1094   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES1G_ANA_CFG_SERDES1G_IB_CFG,
1102   1                          VTSS_F_HSIO_SERDES1G_ANA_CFG_SERDES1G_IB_CFG_IB_FX100_ENA(if_100fx) |
1102   1                          VTSS_F_HSIO_SERDES1G_ANA_CFG_SERDES1G_IB_CFG_IB_ENA_CMV_TERM(ib_ena_cmv_term) |
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 19  

1102   1                          VTSS_F_HSIO_SERDES1G_ANA_CFG_SERDES1G_IB_CFG_IB_ENA_DC_COUPLING(ena_dc_coupling) |
1102   1                          VTSS_F_HSIO_SERDES1G_ANA_CFG_SERDES1G_IB_CFG_IB_RESISTOR_CTRL(13),
1102   1                          VTSS_M_HSIO_SERDES1G_ANA_CFG_SERDES1G_IB_CFG_IB_FX100_ENA |
1102   1                          VTSS_M_HSIO_SERDES1G_ANA_CFG_SERDES1G_IB_CFG_IB_ENA_CMV_TERM |
1102   1                          VTSS_M_HSIO_SERDES1G_ANA_CFG_SERDES1G_IB_CFG_IB_ENA_DC_COUPLING |
1102   1                          VTSS_M_HSIO_SERDES1G_ANA_CFG_SERDES1G_IB_CFG_IB_RESISTOR_CTRL);
1103   1      
1104   1          /* DES_CFG */
1105   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES1G_ANA_CFG_SERDES1G_DES_CFG,
1113   1                          VTSS_F_HSIO_SERDES1G_ANA_CFG_SERDES1G_DES_CFG_DES_PHS_CTRL(des_phs_ctrl) |
1113   1                          VTSS_F_HSIO_SERDES1G_ANA_CFG_SERDES1G_DES_CFG_DES_CPMD_SEL(cpmd_sel) |
1113   1                          VTSS_F_HSIO_SERDES1G_ANA_CFG_SERDES1G_DES_CFG_DES_MBTR_CTRL(mbtr_ctrl) |
1113   1                          VTSS_F_HSIO_SERDES1G_ANA_CFG_SERDES1G_DES_CFG_DES_BW_ANA(des_bw_ana),
1113   1                          VTSS_M_HSIO_SERDES1G_ANA_CFG_SERDES1G_DES_CFG_DES_PHS_CTRL |
1113   1                          VTSS_M_HSIO_SERDES1G_ANA_CFG_SERDES1G_DES_CFG_DES_CPMD_SEL |
1113   1                          VTSS_M_HSIO_SERDES1G_ANA_CFG_SERDES1G_DES_CFG_DES_MBTR_CTRL |
1113   1                          VTSS_M_HSIO_SERDES1G_ANA_CFG_SERDES1G_DES_CFG_DES_BW_ANA);
1114   1      
1115   1          /* MISC_CFG */
1116   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES1G_DIG_CFG_SERDES1G_MISC_CFG,
1120   1                          VTSS_F_HSIO_SERDES1G_DIG_CFG_SERDES1G_MISC_CFG_DES_100FX_CPMD_ENA(if_100fx) |
1120   1                          VTSS_F_HSIO_SERDES1G_DIG_CFG_SERDES1G_MISC_CFG_LANE_RST(1),
1120   1                          VTSS_M_HSIO_SERDES1G_DIG_CFG_SERDES1G_MISC_CFG_DES_100FX_CPMD_ENA |
1120   1                          VTSS_M_HSIO_SERDES1G_DIG_CFG_SERDES1G_MISC_CFG_LANE_RST);
1121   1      
1122   1          /* PLL_CFG */
1123   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES1G_ANA_CFG_SERDES1G_PLL_CFG,
1125   1                          VTSS_F_HSIO_SERDES1G_ANA_CFG_SERDES1G_PLL_CFG_PLL_FSM_ENA(1),
1125   1                          VTSS_M_HSIO_SERDES1G_ANA_CFG_SERDES1G_PLL_CFG_PLL_FSM_ENA);
1126   1      
1127   1          /* COMMON_CFG */
1128   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES1G_ANA_CFG_SERDES1G_COMMON_CFG,
1130   1                          VTSS_F_HSIO_SERDES1G_ANA_CFG_SERDES1G_COMMON_CFG_ENA_LANE(ena_lane),
1130   1                          VTSS_M_HSIO_SERDES1G_ANA_CFG_SERDES1G_COMMON_CFG_ENA_LANE);
1131   1          h2_sd1g_write(addr);
1132   1      
1133   1          /* 2. Release PLL reset */
1134   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES1G_ANA_CFG_SERDES1G_COMMON_CFG,
1136   1                       VTSS_F_HSIO_SERDES1G_ANA_CFG_SERDES1G_COMMON_CFG_SYS_RST(1),
1136   1                       VTSS_M_HSIO_SERDES1G_ANA_CFG_SERDES1G_COMMON_CFG_SYS_RST);
1137   1          h2_sd1g_write(addr);
1138   1      
1139   1          /* 3. Release digital reset */
1140   1          H2_WRITE_MASKED(VTSS_HSIO_SERDES1G_DIG_CFG_SERDES1G_MISC_CFG,
1142   1                          VTSS_F_HSIO_SERDES1G_DIG_CFG_SERDES1G_MISC_CFG_LANE_RST(0),
1142   1                          VTSS_M_HSIO_SERDES1G_DIG_CFG_SERDES1G_MISC_CFG_LANE_RST);
1143   1          h2_sd1g_write(addr);
1144   1      }
1145          #endif // FERRET_F11 || FERRET_F10P
1146          #endif /* FERRET */
1147          
1148          /* ************************************************************************ */
1149          uchar h2_serdes_macro_phase_loop_locked (void)
1150          /* ------------------------------------------------------------------------ --
1151           * Purpose     : Init PLL5G
1152           * Remarks     :
1153           * Restrictions:
1154           * See also    :
1155           * Example     :
1156           ****************************************************************************/
1157          {
1158   1          ulong locked;
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 20  

1159   1      
1160   1      #if defined(VTSS_ARCH_LUTON26)
                  const ulong code pll5g_cfg2 = VTSS_MACRO_CTRL_PLL5G_CFG_PLL5G_CFG2;
              
                  H2_WRITE(VTSS_MACRO_CTRL_PLL5G_CFG_PLL5G_CFG4, 0x00007ae0);
              
                  delay_1(2);
                  H2_WRITE(pll5g_cfg2, 0x00610400);
                  delay_1(2);
                  H2_WRITE(pll5g_cfg2, 0x00610c00);
                  delay_1(2);
                  H2_WRITE(pll5g_cfg2, 0x00610800);
                  delay_1(2);
                  H2_WRITE(pll5g_cfg2, 0x00610000);
                  delay_1(2);
              
                  H2_READ(VTSS_MACRO_CTRL_PLL5G_STATUS_PLL5G_STATUS0, locked);
                  return (locked & VTSS_F_MACRO_CTRL_PLL5G_STATUS_PLL5G_STATUS0_LOCK_STATUS);
              
              #elif defined(VTSS_ARCH_OCELOT)
1179   1          /*
1180   1           * On the unmanaged Ferret board the LCPLL configuration (selecting the input
1181   1           * frequency) is done via strapping of GPIO 0, 1 and 3, and the LCPLL will
1182   1           * read the value of these pins while reset is applied.
1183   1           * This "should" cause the startup to be identical independent of if the board
1184   1           * is powered up or reset is applied afterwards, but when powering up the board
1185   1           * initially the input clock might not be running, so some of the initial
1186   1           * calibration/biasing might be generating a different results than when
1187   1           * applying a reset after power up.
1188   1           * When reset is applied after power up the LCPLL might also see the REFCLK_SEL
1189   1           * signals toggling as the pins are used as output in the application code
1190   1           * and it will take a little time for them to reach their final stage (controlled
1191   1           * by the pin strapping).
1192   1           *
1193   1           * In order to get the LCPLL to operate with optimum performance there are a
1194   1           * number of register writes that must be performed after power up
1195   1           * (documented as part of the EVE procedures)
1196   1           *
1197   1           * The following code is refer to main trunk
1198   1           * vtss_api\base\ail\vtss_pll5g_procs.c
1199   1           * vtss_api\base\serval\vtss_ocelot_pll5g_setup.c
1200   1           */
1201   1          // +++ Start of the EVE procedures
1202   1          H2_WRITE_MASKED(VTSS_HSIO_PLL5G_CFG_PLL5G_CFG4,
1204   1                          VTSS_F_HSIO_PLL5G_CFG_PLL5G_CFG4_IB_CTRL(0x7600),
1204   1                          VTSS_M_HSIO_PLL5G_CFG_PLL5G_CFG4_IB_CTRL);
1205   1          H2_WRITE_MASKED(VTSS_HSIO_PLL5G_CFG_PLL5G_CFG0,
1207   1                          0,
1207   1                          VTSS_M_HSIO_PLL5G_CFG_PLL5G_CFG0_ENA_VCO_CONTRH);
1208   1          H2_WRITE_MASKED(VTSS_HSIO_PLL5G_CFG_PLL5G_CFG0,
1210   1                          VTSS_F_HSIO_PLL5G_CFG_PLL5G_CFG0_LOOP_BW_RES(14),
1210   1                          VTSS_M_HSIO_PLL5G_CFG_PLL5G_CFG0_LOOP_BW_RES);
1211   1          H2_WRITE_MASKED(VTSS_HSIO_PLL5G_CFG_PLL5G_CFG0,
1213   1                          VTSS_F_HSIO_PLL5G_CFG_PLL5G_CFG0_SELBGV820(4),
1213   1                          VTSS_M_HSIO_PLL5G_CFG_PLL5G_CFG0_SELBGV820);
1214   1      
1215   1          /* Toggle DISABLE_FSM to re-trigger the Startup-FSM of the LCPLL */
1216   1          H2_WRITE_MASKED(VTSS_HSIO_PLL5G_CFG_PLL5G_CFG2,
1218   1                          VTSS_F_HSIO_PLL5G_CFG_PLL5G_CFG2_DISABLE_FSM(1),
1218   1                          VTSS_M_HSIO_PLL5G_CFG_PLL5G_CFG2_DISABLE_FSM);
1219   1          delay_1(2);
1220   1          H2_WRITE_MASKED(VTSS_HSIO_PLL5G_CFG_PLL5G_CFG2,
C51 COMPILER V9.60.0.0   H2SDCFG                                                           11/30/2021 16:22:21 PAGE 21  

1222   1                          VTSS_F_HSIO_PLL5G_CFG_PLL5G_CFG2_DISABLE_FSM(0),
1222   1                          VTSS_M_HSIO_PLL5G_CFG_PLL5G_CFG2_DISABLE_FSM);
1223   1          delay_1(50); // Wait for 50 ms for end of the EVE procedures
1224   1          // +++ End of the EVE procedures
1225   1      
1226   1          H2_READ(VTSS_HSIO_PLL5G_STATUS_PLL5G_STATUS0, locked);
1227   1          return (VTSS_X_HSIO_PLL5G_STATUS_PLL5G_STATUS0_LOCK_STATUS(locked));
1228   1      #endif
1229   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5044    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     243
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
